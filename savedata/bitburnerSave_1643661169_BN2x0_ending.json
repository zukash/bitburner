{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":11278,\"hp\":2745,\"max_hp\":4003,\"strength\":132017,\"defense\":39930,\"dexterity\":7663,\"agility\":8757,\"charisma\":896,\"intelligence\":0,\"hacking_chance_mult\":4.030110457630515,\"hacking_speed_mult\":3.3816669436574345,\"hacking_money_mult\":21.355424269629417,\"hacking_grow_mult\":12.220937262673983,\"hacking_exp\":226139013309.00696,\"strength_exp\":4309.370158798979,\"defense_exp\":4309.370158798979,\"dexterity_exp\":4955.775682618625,\"agility_exp\":4309.370158798979,\"charisma_exp\":7871.742120008001,\"intelligence_exp\":0,\"hacking_mult\":22.14549035018847,\"strength_mult\":1845.501139034417,\"defense_mult\":558.1999264860052,\"dexterity_mult\":101.44732725172494,\"agility_mult\":122.42166144935871,\"charisma_mult\":10.05021147787826,\"hacking_exp_mult\":25.936025275280297,\"strength_exp_mult\":5.52979617451343,\"defense_exp_mult\":5.52979617451343,\"dexterity_exp_mult\":6.359265600690444,\"agility_exp_mult\":5.52979617451343,\"charisma_exp_mult\":10.153156352391253,\"company_rep_mult\":26.302560840433845,\"faction_rep_mult\":3.9812552357390874,\"money\":9753278964480.55,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"SERVER_1048576GB\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Daedalus\",\"Sector-12\",\"The Covenant\",\"Tetrads\",\"Illuminati\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1}],\"numPeopleKilled\":1,\"karma\":-50.75000000000001,\"crime_money_mult\":5.156879517306975,\"crime_success_mult\":2.7595341898632606,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":1,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.971036437169677,\"hacknet_node_money_mult\":4.269762699820904,\"hacknet_node_purchase_cost_mult\":0.415283684008369,\"hacknet_node_ram_cost_mult\":0.5428544888998288,\"hacknet_node_core_cost_mult\":0.5428544888998288,\"hacknet_node_level_cost_mult\":0.4614263155648545,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":105999.76369979561,\"hack\":2577,\"str\":330911,\"def\":90470,\"dex\":4563,\"agi\":84,\"cha\":1901,\"hack_exp\":2347.142078202898,\"str_exp\":63785.62877355438,\"def_exp\":23778.040174523107,\"dex_exp\":4326.553524734574,\"agi_exp\":0,\"cha_exp\":3294.4117668743174,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":853087.7570148644,\"str_asc_points\":10784653.030099178,\"def_asc_points\":4482974.729704332,\"dex_asc_points\":1645928.9803351616,\"agi_asc_points\":268503.940241766,\"cha_asc_points\":829140.9250606732,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"hong_kong_gang\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":112469.70750333792,\"hack\":2329,\"str\":352876,\"def\":96403,\"dex\":3801,\"agi\":79,\"cha\":1526,\"hack_exp\":2192.252391151332,\"str_exp\":67281.1052919719,\"def_exp\":25014.99462378039,\"dex_exp\":3799.016610560495,\"agi_exp\":0,\"cha_exp\":2828.222978675475,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":744210.9497078913,\"str_asc_points\":11999046.329028886,\"def_asc_points\":4961522.961407951,\"dex_asc_points\":1269022.4794533658,\"agi_asc_points\":239450.3491656722,\"cha_asc_points\":611082.5521809618,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"king_kong_gang\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":106185.42684221767,\"hack\":2639,\"str\":334122,\"def\":88667,\"dex\":3993,\"agi\":78,\"cha\":1721,\"hack_exp\":2385.4890366628415,\"str_exp\":64298.73811023257,\"def_exp\":23399.55679026326,\"dex_exp\":3934.1430495697314,\"agi_exp\":0,\"cha_exp\":3073.476858153416,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":881190.4881475447,\"str_asc_points\":10958860.405806089,\"def_asc_points\":4341396.390962377,\"dex_asc_points\":1360903.167577081,\"agi_asc_points\":232616.71525106864,\"cha_asc_points\":721659.7535297968,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"ping_pong_gang\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":110145.22905632028,\"hack\":2160,\"str\":345927,\"def\":93413,\"dex\":4204,\"agi\":93,\"cha\":1613,\"hack_exp\":2083.8950926919015,\"str_exp\":66178.70289011147,\"def_exp\":24393.305471304415,\"dex_exp\":4081.1614129770473,\"agi_exp\":0,\"cha_exp\":2938.2689817707196,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":672460.3071009355,\"str_asc_points\":11609058.420165684,\"def_asc_points\":4717973.384419183,\"dex_asc_points\":1464517.1909943777,\"agi_asc_points\":330459.8540911211,\"cha_asc_points\":659562.0994128058,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"ding_dong_gang\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":113039.68663990946,\"hack\":1911,\"str\":354639,\"def\":97625,\"dex\":3820,\"agi\":101,\"cha\":1201,\"hack_exp\":1920.459839177324,\"str_exp\":67560.30878975324,\"def_exp\":25268.06432595194,\"dex_exp\":3812.8773875077845,\"agi_exp\":0,\"cha_exp\":2400.8700223343535,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":571117.4237198303,\"str_asc_points\":12098840.37905958,\"def_asc_points\":5062419.442933675,\"dex_asc_points\":1278299.4726237513,\"agi_asc_points\":383824.9018735895,\"cha_asc_points\":440362.0539912083,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang0\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":117435.64521115302,\"hack\":2083,\"str\":369020,\"def\":100641,\"dex\":4131,\"agi\":105,\"cha\":1448,\"hack_exp\":2033.8015113311517,\"str_exp\":69830.61549424072,\"def_exp\":25890.774792296925,\"dex_exp\":4030.571421244406,\"agi_exp\":0,\"cha_exp\":2727.155153719529,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":640519.0961599188,\"str_asc_points\":12925645.336997634,\"def_asc_points\":5315012.276095763,\"dex_asc_points\":1428433.9800509256,\"agi_asc_points\":416550.88528620906,\"cha_asc_points\":568188.2965878574,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"Nanofiber Weave\",\"BitWire\",\"BrachiBlades\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":135380.1327197484,\"hack\":2057,\"str\":424599,\"def\":118652,\"dex\":4767,\"agi\":132,\"cha\":1358,\"hack_exp\":2016.7349661155758,\"str_exp\":78492.49786672738,\"def_exp\":29549.694122456265,\"dex_exp\":4464.738050479883,\"agi_exp\":0,\"cha_exp\":2610.330190875307,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":629814.4303396174,\"str_asc_points\":16331151.02496309,\"def_asc_points\":6923411.693743745,\"dex_asc_points\":1752745.648428042,\"agi_asc_points\":655898.1859597758,\"cha_asc_points\":520551.23795850005,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":152194.22072659267,\"hack\":1655,\"str\":481365,\"def\":131967,\"dex\":4935,\"agi\":168,\"cha\":958,\"hack_exp\":1745.6909182369966,\"str_exp\":87178.20878400876,\"def_exp\":32197.222091762567,\"dex_exp\":4577.097899861041,\"agi_exp\":0,\"cha_exp\":2060.2368731481693,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":471899.6506055915,\"str_asc_points\":20145422.418981213,\"def_asc_points\":8219605.695586292,\"dex_asc_points\":1842075.107040026,\"agi_asc_points\":1070243.0349491143,\"cha_asc_points\":324270.09754509863,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang03\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":148102.09282335482,\"hack\":914,\"str\":470410,\"def\":127063,\"dex\":4321,\"agi\":156,\"cha\":891,\"hack_exp\":1189.1555117300636,\"str_exp\":85513.61511337337,\"def_exp\":31227.270149379397,\"dex_exp\":4161.578076445656,\"agi_exp\":0,\"cha_exp\":1963.6771600334039,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":218973.85141785056,\"str_asc_points\":19383447.790857416,\"def_asc_points\":7731828.610630553,\"dex_asc_points\":1522800.5475072863,\"agi_asc_points\":920868.2857842587,\"cha_asc_points\":294586.45101168676,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang04\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":134367.03701293824,\"hack\":1129,\"str\":427616,\"def\":113088,\"dex\":3896,\"agi\":125,\"cha\":1060,\"hack_exp\":1360.8528713182216,\"str_exp\":78958.09596375524,\"def_exp\":28429.691732549305,\"dex_exp\":3865.9360524364633,\"agi_exp\":0,\"cha_exp\":2206.1965336728517,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":286772.36544960295,\"str_asc_points\":16525470.350707833,\"def_asc_points\":6408530.845404221,\"dex_asc_points\":1314123.7438840945,\"agi_asc_points\":590493.8483653588,\"cha_asc_points\":371844.1784371193,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang05\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":144861.5324569162,\"hack\":666,\"str\":459719,\"def\":125008,\"dex\":3963,\"agi\":153,\"cha\":740,\"hack_exp\":974.2385993240896,\"str_exp\":83883.8415603172,\"def_exp\":30819.161980640038,\"dex_exp\":3913.522394344526,\"agi_exp\":0,\"cha_exp\":1736.5610217900378,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":146975.72641536378,\"str_asc_points\":18651644.01333861,\"def_asc_points\":7531055.162019699,\"dex_asc_points\":1346674.315267787,\"agi_asc_points\":880345.676104241,\"cha_asc_points\":230384.19839773062,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Nanofiber Weave\",\"DataJack\",\"Neuralstimulator\",\"Synfibril Muscle\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gang06\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":125890.32259864728,\"hack\":747,\"str\":397409,\"def\":109561,\"dex\":3322,\"agi\":124,\"cha\":698,\"hack_exp\":1046.3883827887346,\"str_exp\":74276.26106522304,\"def_exp\":27714.976351774054,\"dex_exp\":3455.02495283125,\"agi_exp\":0,\"cha_exp\":1671.341382965476,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":169551.16158814848,\"str_asc_points\":14623810.925490689,\"def_asc_points\":6090363.338589981,\"dex_asc_points\":1049613.2559461,\"agi_asc_points\":576466.6087632187,\"cha_asc_points\":213404.18106569682,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"gang07\"}}],\"wanted\":13254.364119757332,\"respect\":1463797.949111616,\"isHackingGang\":false,\"respectGainRate\":6152.118638768822,\"wantedGainRate\":0.000415210175165343,\"moneyGainRate\":2235959117.7248716,\"storedCycles\":7,\"storedTerritoryAndPowerCycles\":27,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":2,\"lastUpdate\":1643661168571,\"totalPlaytime\":3172235400,\"playtimeSinceLastAug\":1948800,\"playtimeSinceLastBitnode\":96950400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-123840,\"codingcontract\":0,\"corporation\":0,\"crime\":696178.7348364417,\"gang\":24844409582360.87,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":9753277964480.55,\"work\":0,\"servers\":-2270751109556.061,\"other\":-281900000,\"augmentations\":-12820099180662.941}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-12090048,\"codingcontract\":337500000,\"corporation\":0,\"crime\":17388053.934836447,\"gang\":89852169315916.36,\"hacking\":57172165788679.18,\"hacknet\":1639035443.8119845,\"hacknet_expenses\":-1651694527447.2224,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-36910152091.805725,\"total\":17740696515875.504,\"work\":103084.10112000516,\"servers\":-65236217503892.3,\"other\":-2255800000,\"augmentations\":-62358542541925.91}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643562392880},{\"ID\":\"NITESEC\",\"unlockedOn\":1643562392904},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643562392906},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643562392908},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643562392911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643562392913},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643562392915},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643562392917},{\"ID\":\"SF1.1\",\"unlockedOn\":1643562392919},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643562392922},{\"ID\":\"NS2\",\"unlockedOn\":1643562392923},{\"ID\":\"TOR\",\"unlockedOn\":1643562392924},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643562392925},{\"ID\":\"N00DLES\",\"unlockedOn\":1643562392925},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643566276100},{\"ID\":\"GANG\",\"unlockedOn\":1643568470494},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643569791497},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643594839087},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643614857134},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643630563574},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643636439173},{\"ID\":\"4S\",\"unlockedOn\":1643640469047},{\"ID\":\"DONATION\",\"unlockedOn\":1643643171411},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1643644311476},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643644491482},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643644491484},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643646900258},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643649060248},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1643650500301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643650500302},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643652857755},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643653397779},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1643656544025},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643659663895},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643660203905}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.1.0.9\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\nvar target = \\\"hong-fang-tea\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile(true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/early-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":694896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\r\\n// be 8GB.\\r\\nvar ram = 8;\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum\\r\\n// amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"early-hack.script\\\", hostname);\\r\\n        exec(\\\"early-hack-.script\\\", hostname, 3);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":694897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"blob:file:///a64e2bfb-523e-40c4-b00a-95aaec8b38a9\"}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":694898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/ef985b02-9958-4062-a481-eff320edfbc9\",\"moduleSequenceNumber\":702576},{\"filename\":\"killallOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/88f2eb53-e8a8-4512-add9-ea2502861b72\",\"moduleSequenceNumber\":704134}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":704134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/52cfdd95-089d-4190-b617-d4c48aa6d4dc\",\"moduleSequenceNumber\":702576},{\"filename\":\"executeOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/db4f9d91-6aad-42cf-a6ca-386ad98952dc\",\"moduleSequenceNumber\":704135}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":704135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseServer.js\",\"url\":\"blob:file:///940edb22-297b-4ce7-b03e-34cf2a400d22\"}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":694901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/9cfb4c28-6c06-4cc0-9d85-9336891c5420\",\"moduleSequenceNumber\":694913},{\"filename\":\"attackOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/2bf4a2f6-315b-4ba4-8b14-e9f06e45b1a7\",\"moduleSequenceNumber\":694942}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":694942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simpleHack.js\",\"url\":\"blob:https://danielyxie.github.io/7089202c-e543-42d1-bfb0-52aa06f30347\",\"moduleSequenceNumber\":360847}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":694903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/6b38c348-1e70-439b-b51b-5eaced89d2ad\",\"moduleSequenceNumber\":681256}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":694904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/0d32c0ec-4b1b-4ae5-bd56-bc8efcb9ac03\",\"moduleSequenceNumber\":679740},{\"filename\":\"hackRandomly.js\",\"url\":\"blob:https://danielyxie.github.io/fa947910-772c-4a5d-94d5-5dac3c060a44\",\"moduleSequenceNumber\":681257}],\"dependents\":[],\"ramUsage\":6,\"server\":\"home\",\"moduleSequenceNumber\":694905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scanAll.js\",\"url\":\"blob:https://danielyxie.github.io/66bfca74-69e2-402a-8eff-5838802a043c\"},{\"filename\":\"hackRandomlyHome.js\",\"url\":\"blob:https://danielyxie.github.io/7d72ff23-75ae-4b1b-bc66-2912db2645de\"}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":694906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"upgradeServer.js\",\"url\":\"blob:https://danielyxie.github.io/d5b75053-82d3-4c0c-988f-48317160b04f\",\"moduleSequenceNumber\":371700}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":694907}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/993ce424-2c6c-4930-a6fe-e4d422f0cd30\",\"moduleSequenceNumber\":708745}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":715002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/bade4e1d-ae4c-4905-9ca9-10e21fceaadf\",\"moduleSequenceNumber\":511483},{\"filename\":\"buyBuyPurchase.js\",\"url\":\"blob:https://danielyxie.github.io/4bff123e-a174-4aff-ab22-b3a01f28a5f8\",\"moduleSequenceNumber\":511660}],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"home\",\"moduleSequenceNumber\":694909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/817b65d4-0e55-4053-96e2-6208503fa2a6\",\"moduleSequenceNumber\":708746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":708746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7758ab27-99eb-46d5-b34d-e9fe65e16903\"}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":694911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/aaad62c3-e816-4108-a8f0-317168e5de7d\",\"moduleSequenceNumber\":15152}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":694912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/d30e0ac9-a966-41a2-8039-254f707c3eaa\",\"moduleSequenceNumber\":702576}],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"home\",\"moduleSequenceNumber\":702576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/d53e39aa-5a8b-475f-b0e3-ae52214ca116\",\"moduleSequenceNumber\":14577},{\"filename\":\"manager.js\",\"url\":\"blob:https://danielyxie.github.io/ad790639-7660-4674-976c-b9e175ec0884\",\"moduleSequenceNumber\":14888}],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"home\",\"moduleSequenceNumber\":694914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/8e45c2f6-9a77-482a-966c-6b74ba8e5376\",\"moduleSequenceNumber\":702576},{\"filename\":\"transferScripts.js\",\"url\":\"blob:https://danielyxie.github.io/feec498f-96c9-4a11-b246-e8426851e59b\",\"moduleSequenceNumber\":704091}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":704091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/b099a011-5495-468c-b496-2999902984db\",\"moduleSequenceNumber\":702576},{\"filename\":\"contract.js\",\"url\":\"blob:https://danielyxie.github.io/48394299-6a11-4805-9ec3-133aff1d97ec\",\"moduleSequenceNumber\":728943}],\"dependents\":[],\"ramUsage\":31,\"server\":\"home\",\"moduleSequenceNumber\":728943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tmessage.push(\\\"  gang ascendAll\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nfunction ascendAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.ascendMember(member);\\n\\t}\\n\\tns.tprint('Successfully ascend all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'ascendAll':\\n\\t\\t\\tascendAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:https://danielyxie.github.io/3bd3ce51-8072-4698-9e29-5c59525f16bb\",\"moduleSequenceNumber\":753504}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":753504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":694918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"SERVER_1048576GB\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"memo.txt\",\"text\":\"nitesec: avmnite-02h\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"- manager.js\\n\\t- [ ] auto mode\\n\\t- [ ] divide tasks when allocating\\n- server.js\\n\\t- [ ] auto purchase\\n\\t- [ ] filtering\\n- misc\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"80.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":696627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":696628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"ecorp\",\"moduleSequenceNumber\":696629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"ecorp\",\"moduleSequenceNumber\":696630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"ecorp\",\"moduleSequenceNumber\":696631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":715042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":696633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":696634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":696635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":696636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":696637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"ecorp\",\"moduleSequenceNumber\":696638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":696639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"ecorp\",\"moduleSequenceNumber\":696640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"ecorp\",\"moduleSequenceNumber\":696641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":696642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"ecorp\",\"moduleSequenceNumber\":696643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":696644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":696645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"ecorp\",\"moduleSequenceNumber\":696646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":696647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27592784709.600002,\"moneyMax\":137963923548,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1167,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"49.8.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":696963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":696964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"megacorp\",\"moduleSequenceNumber\":696965}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"megacorp\",\"moduleSequenceNumber\":696966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"megacorp\",\"moduleSequenceNumber\":696967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":715050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":696969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":696970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":696971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":696972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":696973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"megacorp\",\"moduleSequenceNumber\":696974}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":696975}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"megacorp\",\"moduleSequenceNumber\":696976}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"megacorp\",\"moduleSequenceNumber\":696977}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":696978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"megacorp\",\"moduleSequenceNumber\":696979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":696980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":696981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"megacorp\",\"moduleSequenceNumber\":696982}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":696983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22455105254,\"moneyMax\":112275526270,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1318,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"35.3.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":715038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":696479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":8980168953.6,\"moneyMax\":44900844768,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1078,\"serverGrowth\":71}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"28.4.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":249.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25007,\"ramUsage\":4.9,\"server\":\"blade\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/03a94c52-188c-4b63-8434-ea2b20e36611\",\"moduleSequenceNumber\":697974}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681867,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":140,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f7f5e4ad-5870-46d4-84b3-8542797c4810\",\"moduleSequenceNumber\":698016}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":696585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"blade\",\"moduleSequenceNumber\":696586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"blade\",\"moduleSequenceNumber\":696587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"blade\",\"moduleSequenceNumber\":696588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"blade\",\"moduleSequenceNumber\":696589}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/c8c1bdf8-b49d-4ebb-aabc-7fbb329fc97a\",\"moduleSequenceNumber\":715089}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"blade\",\"moduleSequenceNumber\":715089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"blade\",\"moduleSequenceNumber\":696591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/03a94c52-188c-4b63-8434-ea2b20e36611\",\"moduleSequenceNumber\":697974}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"blade\",\"moduleSequenceNumber\":697974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"blade\",\"moduleSequenceNumber\":696593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":696594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":696595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"blade\",\"moduleSequenceNumber\":696596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"blade\",\"moduleSequenceNumber\":696597}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"blade\",\"moduleSequenceNumber\":696598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"blade\",\"moduleSequenceNumber\":696599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"blade\",\"moduleSequenceNumber\":696600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"blade\",\"moduleSequenceNumber\":696601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":696602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"blade\",\"moduleSequenceNumber\":696603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"blade\",\"moduleSequenceNumber\":696604}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f7f5e4ad-5870-46d4-84b3-8542797c4810\",\"moduleSequenceNumber\":698016}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":698016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":15777348943.6,\"moneyMax\":78886744718,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":83}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"75.5.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":696879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"nwo\",\"moduleSequenceNumber\":696880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nwo\",\"moduleSequenceNumber\":696881}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"nwo\",\"moduleSequenceNumber\":696882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"nwo\",\"moduleSequenceNumber\":696883}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nwo\",\"moduleSequenceNumber\":715048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nwo\",\"moduleSequenceNumber\":696885}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"nwo\",\"moduleSequenceNumber\":696886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"nwo\",\"moduleSequenceNumber\":696887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":696888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":696889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"nwo\",\"moduleSequenceNumber\":696890}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"nwo\",\"moduleSequenceNumber\":696891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"nwo\",\"moduleSequenceNumber\":696892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"nwo\",\"moduleSequenceNumber\":696893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"nwo\",\"moduleSequenceNumber\":696894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"nwo\",\"moduleSequenceNumber\":696895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":696896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"nwo\",\"moduleSequenceNumber\":696897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"nwo\",\"moduleSequenceNumber\":696898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":696899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15132745177.2,\"moneyMax\":75663725886,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1169,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"51.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696923}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":715049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696932}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696933}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696934}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696935}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":696941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":9411708923.2,\"moneyMax\":47058544616.00001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":952,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"61.6.6.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":249.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25011,\"ramUsage\":4.9,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b083b295-3fd4-4d40-9aad-899576317475\",\"moduleSequenceNumber\":697976}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681871,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":140,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebb333f8-aa3a-4c17-b828-b01832f5bf11\",\"moduleSequenceNumber\":698018}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":696837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":696838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omnitek\",\"moduleSequenceNumber\":696839}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"omnitek\",\"moduleSequenceNumber\":696840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"omnitek\",\"moduleSequenceNumber\":696841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/266c6a6f-b718-41ac-8200-eda440cbd008\",\"moduleSequenceNumber\":715091}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":715091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":696843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b083b295-3fd4-4d40-9aad-899576317475\",\"moduleSequenceNumber\":697976}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":697976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":696845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":696846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":696847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"omnitek\",\"moduleSequenceNumber\":696848}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":696849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"omnitek\",\"moduleSequenceNumber\":696850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"omnitek\",\"moduleSequenceNumber\":696851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":696852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"omnitek\",\"moduleSequenceNumber\":696853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":696854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":696855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"omnitek\",\"moduleSequenceNumber\":696856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ebb333f8-aa3a-4c17-b828-b01832f5bf11\",\"moduleSequenceNumber\":698018}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":698018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":6138868848.8,\"moneyMax\":30694344244,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"66.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":697047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":697048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"4sigma\",\"moduleSequenceNumber\":697049}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"4sigma\",\"moduleSequenceNumber\":697050}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"4sigma\",\"moduleSequenceNumber\":697051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":715052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":697053}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":697054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":697055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":697056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":697057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"4sigma\",\"moduleSequenceNumber\":697058}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":697059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"4sigma\",\"moduleSequenceNumber\":697060}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"4sigma\",\"moduleSequenceNumber\":697061}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":697062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"4sigma\",\"moduleSequenceNumber\":697063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":697064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":697065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"4sigma\",\"moduleSequenceNumber\":697066}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":697067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":8389360568.8,\"moneyMax\":41946802844,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1211,\"serverGrowth\":79}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"33.0.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697091}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697092}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":715053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":697109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":8890913493.2,\"moneyMax\":44454567466.00001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"41.9.6.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2041.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25019,\"ramUsage\":4.9,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/3b691485-742d-4676-b35f-8197423dc628\",\"moduleSequenceNumber\":697980}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681879,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1164,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/28498813-f90a-40ec-9a29-384b7e7fbc4f\",\"moduleSequenceNumber\":698022}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/751228ff-c0c9-4299-8817-c91475b14aad\",\"moduleSequenceNumber\":715095}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":715095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/3b691485-742d-4676-b35f-8197423dc628\",\"moduleSequenceNumber\":697980}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":697318}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/28498813-f90a-40ec-9a29-384b7e7fbc4f\",\"moduleSequenceNumber\":698022}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":698022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":695425972.8000001,\"moneyMax\":3477129864,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":969,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"93.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":715043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":696689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"82.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":696795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":696796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"stormtech\",\"moduleSequenceNumber\":696797}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"stormtech\",\"moduleSequenceNumber\":696798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"stormtech\",\"moduleSequenceNumber\":696799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":715046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":696801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":696802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":696803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":696804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":696805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"stormtech\",\"moduleSequenceNumber\":696806}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":696807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"stormtech\",\"moduleSequenceNumber\":696808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"stormtech\",\"moduleSequenceNumber\":696809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":696810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"stormtech\",\"moduleSequenceNumber\":696811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":696812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":696813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"stormtech\",\"moduleSequenceNumber\":696814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":696815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":475786670.40000004,\"moneyMax\":2378933352,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":992,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"63.8.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":696081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":696082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"defcomm\",\"moduleSequenceNumber\":696083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"defcomm\",\"moduleSequenceNumber\":696084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"defcomm\",\"moduleSequenceNumber\":696085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":715029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":696087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":696088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":696089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":696090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":696091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"defcomm\",\"moduleSequenceNumber\":696092}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":696093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"defcomm\",\"moduleSequenceNumber\":696094}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"defcomm\",\"moduleSequenceNumber\":696095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":696096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"defcomm\",\"moduleSequenceNumber\":696097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":696098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":696099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"defcomm\",\"moduleSequenceNumber\":696100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":696101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":323323071.6,\"moneyMax\":1616615358.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"55.1.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":696291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":696292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"infocomm\",\"moduleSequenceNumber\":696293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"infocomm\",\"moduleSequenceNumber\":696294}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"infocomm\",\"moduleSequenceNumber\":696295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":715034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":696297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":696298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":696299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":696300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":696301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"infocomm\",\"moduleSequenceNumber\":696302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":696303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"infocomm\",\"moduleSequenceNumber\":696304}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"infocomm\",\"moduleSequenceNumber\":696305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":696306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"infocomm\",\"moduleSequenceNumber\":696307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":696308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":696309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"infocomm\",\"moduleSequenceNumber\":696310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":696311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":287878757.2,\"moneyMax\":1439393786,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":904,\"serverGrowth\":49}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"62.3.8.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":249.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25016,\"ramUsage\":4.9,\"server\":\"helios\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9df573ff-1d7a-4901-89d1-3952b58a5524\",\"moduleSequenceNumber\":697979}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681877,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":140,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/be12ea2b-77b7-47aa-b8d3-c925e07dc916\",\"moduleSequenceNumber\":698021}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":697173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"helios\",\"moduleSequenceNumber\":697174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"helios\",\"moduleSequenceNumber\":697175}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"helios\",\"moduleSequenceNumber\":697176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"helios\",\"moduleSequenceNumber\":697177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/8f04f18c-9ae7-4572-97c1-adb475a4d309\",\"moduleSequenceNumber\":715094}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"helios\",\"moduleSequenceNumber\":715094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"helios\",\"moduleSequenceNumber\":697179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9df573ff-1d7a-4901-89d1-3952b58a5524\",\"moduleSequenceNumber\":697979}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"helios\",\"moduleSequenceNumber\":697979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"helios\",\"moduleSequenceNumber\":697181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":697182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":697183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"helios\",\"moduleSequenceNumber\":697184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"helios\",\"moduleSequenceNumber\":697185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"helios\",\"moduleSequenceNumber\":697186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"helios\",\"moduleSequenceNumber\":697187}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"helios\",\"moduleSequenceNumber\":697188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"helios\",\"moduleSequenceNumber\":697189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":697190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"helios\",\"moduleSequenceNumber\":697191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"helios\",\"moduleSequenceNumber\":697192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/be12ea2b-77b7-47aa-b8d3-c925e07dc916\",\"moduleSequenceNumber\":698021}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":698021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":227404419.60000002,\"moneyMax\":1137022098.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"26.3.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25002,\"ramUsage\":4.9,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/786fe43e-df7b-4ba2-bceb-6dd989f67f9b\",\"moduleSequenceNumber\":697972}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681821,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fcbe4066-ec9f-4527-bca2-8785e75e5ecc\",\"moduleSequenceNumber\":698014}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":696375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":696376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"vitalife\",\"moduleSequenceNumber\":696377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"vitalife\",\"moduleSequenceNumber\":696378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"vitalife\",\"moduleSequenceNumber\":696379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/68dd7df3-eb5e-4f8a-a4ed-389d78596b29\",\"moduleSequenceNumber\":715087}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":715087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":696381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/786fe43e-df7b-4ba2-bceb-6dd989f67f9b\",\"moduleSequenceNumber\":697972}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":697972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":696383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":696384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":696385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"vitalife\",\"moduleSequenceNumber\":696386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":696387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"vitalife\",\"moduleSequenceNumber\":696388}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"vitalife\",\"moduleSequenceNumber\":696389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":696390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"vitalife\",\"moduleSequenceNumber\":696391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":696392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":696393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"vitalife\",\"moduleSequenceNumber\":696394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fcbe4066-ec9f-4527-bca2-8785e75e5ecc\",\"moduleSequenceNumber\":698014}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":698014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":308104537.2,\"moneyMax\":1540522686,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":861,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"1.2.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":696123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"icarus\",\"moduleSequenceNumber\":696124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"icarus\",\"moduleSequenceNumber\":696125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"icarus\",\"moduleSequenceNumber\":696126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"icarus\",\"moduleSequenceNumber\":696127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"icarus\",\"moduleSequenceNumber\":715030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"icarus\",\"moduleSequenceNumber\":696129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"icarus\",\"moduleSequenceNumber\":696130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"icarus\",\"moduleSequenceNumber\":696131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":696132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":696133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"icarus\",\"moduleSequenceNumber\":696134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"icarus\",\"moduleSequenceNumber\":696135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"icarus\",\"moduleSequenceNumber\":696136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"icarus\",\"moduleSequenceNumber\":696137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"icarus\",\"moduleSequenceNumber\":696138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"icarus\",\"moduleSequenceNumber\":696139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":696140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"icarus\",\"moduleSequenceNumber\":696141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"icarus\",\"moduleSequenceNumber\":696142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":696143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":366253104.40000004,\"moneyMax\":1831265522,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"23.4.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24976,\"ramUsage\":4.9,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b6dc4557-8603-4edd-be45-47ddbfffb4b1\",\"moduleSequenceNumber\":697959}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681921,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/693e1e81-8126-4a2c-97f7-529d0f7aa0e5\",\"moduleSequenceNumber\":698001}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/9eb03df5-8423-4737-b4ef-d298cc9bc78e\",\"moduleSequenceNumber\":715116}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":715116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b6dc4557-8603-4edd-be45-47ddbfffb4b1\",\"moduleSequenceNumber\":697959}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":697959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695504}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/693e1e81-8126-4a2c-97f7-529d0f7aa0e5\",\"moduleSequenceNumber\":698001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":698001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":475637134.40000004,\"moneyMax\":2378185672,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"39.9.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25001,\"ramUsage\":4.9,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b946e1a1-e88c-4c29-826b-4b1ebdeacc39\",\"moduleSequenceNumber\":697971}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681819,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/46514e3c-c005-4393-8a52-f8807929d99d\",\"moduleSequenceNumber\":698013}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/736114a2-8df2-4d79-9a8e-6273fe19f6de\",\"moduleSequenceNumber\":715086}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":715086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b946e1a1-e88c-4c29-826b-4b1ebdeacc39\",\"moduleSequenceNumber\":697971}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":697971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/46514e3c-c005-4393-8a52-f8807929d99d\",\"moduleSequenceNumber\":698013}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":698013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":305065264,\"moneyMax\":1525326320,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"55.0.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25009,\"ramUsage\":4.9,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9af109f8-6526-4b05-8da6-569cb3d1812b\",\"moduleSequenceNumber\":697975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681869,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0c199193-dba8-4cab-aaea-9d3b94867616\",\"moduleSequenceNumber\":698017}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":696753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":696754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"microdyne\",\"moduleSequenceNumber\":696755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"microdyne\",\"moduleSequenceNumber\":696756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"microdyne\",\"moduleSequenceNumber\":696757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/ee25bc1a-9f64-44ed-bdbd-320294d76013\",\"moduleSequenceNumber\":715090}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":715090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":696759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9af109f8-6526-4b05-8da6-569cb3d1812b\",\"moduleSequenceNumber\":697975}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":697975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":696761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":696762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":696763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"microdyne\",\"moduleSequenceNumber\":696764}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":696765}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"microdyne\",\"moduleSequenceNumber\":696766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"microdyne\",\"moduleSequenceNumber\":696767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":696768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"microdyne\",\"moduleSequenceNumber\":696769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":696770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":696771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"microdyne\",\"moduleSequenceNumber\":696772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0c199193-dba8-4cab-aaea-9d3b94867616\",\"moduleSequenceNumber\":698017}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":698017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":241706331.20000002,\"moneyMax\":1208531656,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":77}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"75.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696713}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696715}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":715044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696717}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696724}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696725}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":696731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":340320664.40000004,\"moneyMax\":1701603322.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"33.8.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":695997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":695998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":695999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":715027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696008}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696010}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":696017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":331216764.8,\"moneyMax\":1656083824,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":88}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"36.9.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697553}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":715064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697565}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":697571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":400770089.6,\"moneyMax\":2003850448,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"94.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25023,\"ramUsage\":4.9,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e091c9b2-16b4-4ac1-b668-b6fd47c19d48\",\"moduleSequenceNumber\":697982}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681883,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8010e2f1-1eb3-4ca6-b817-ffee78a32af0\",\"moduleSequenceNumber\":698024}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":697467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"omnia\",\"moduleSequenceNumber\":697468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omnia\",\"moduleSequenceNumber\":697469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"omnia\",\"moduleSequenceNumber\":697470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"omnia\",\"moduleSequenceNumber\":697471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/5ce4020e-a355-4dae-bbd8-2e4d309ff69a\",\"moduleSequenceNumber\":715097}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omnia\",\"moduleSequenceNumber\":715097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omnia\",\"moduleSequenceNumber\":697473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e091c9b2-16b4-4ac1-b668-b6fd47c19d48\",\"moduleSequenceNumber\":697982}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"omnia\",\"moduleSequenceNumber\":697982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"omnia\",\"moduleSequenceNumber\":697475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":697476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":697477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"omnia\",\"moduleSequenceNumber\":697478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"omnia\",\"moduleSequenceNumber\":697479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"omnia\",\"moduleSequenceNumber\":697480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"omnia\",\"moduleSequenceNumber\":697481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"omnia\",\"moduleSequenceNumber\":697482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"omnia\",\"moduleSequenceNumber\":697483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":697484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"omnia\",\"moduleSequenceNumber\":697485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"omnia\",\"moduleSequenceNumber\":697486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/8010e2f1-1eb3-4ca6-b817-ffee78a32af0\",\"moduleSequenceNumber\":698024}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":698024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":375301441.6,\"moneyMax\":1876507208,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"93.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":696165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":696166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zb-def\",\"moduleSequenceNumber\":696167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"zb-def\",\"moduleSequenceNumber\":696168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"zb-def\",\"moduleSequenceNumber\":696169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":715031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":696171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":696172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":696173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":696174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":696175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"zb-def\",\"moduleSequenceNumber\":696176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":696177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"zb-def\",\"moduleSequenceNumber\":696178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"zb-def\",\"moduleSequenceNumber\":696179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":696180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"zb-def\",\"moduleSequenceNumber\":696181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":696182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":696183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"zb-def\",\"moduleSequenceNumber\":696184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":696185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":411490282.40000004,\"moneyMax\":2057451412,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"68.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":715057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697271}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697276}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":697277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":322391313.20000005,\"moneyMax\":1611956566.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"47.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24999,\"ramUsage\":4.9,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8e777d87-f4bd-4ebf-9afa-23dda3bafad6\",\"moduleSequenceNumber\":697970}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681938,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b86f52df-1f58-4a90-9791-9aacd6ffe189\",\"moduleSequenceNumber\":698012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":696207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"solaris\",\"moduleSequenceNumber\":696208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"solaris\",\"moduleSequenceNumber\":696209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"solaris\",\"moduleSequenceNumber\":696210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"solaris\",\"moduleSequenceNumber\":696211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/af626cb4-6659-479a-9330-aad0faeef1c8\",\"moduleSequenceNumber\":715085}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"solaris\",\"moduleSequenceNumber\":715085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"solaris\",\"moduleSequenceNumber\":696213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8e777d87-f4bd-4ebf-9afa-23dda3bafad6\",\"moduleSequenceNumber\":697970}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"solaris\",\"moduleSequenceNumber\":697970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"solaris\",\"moduleSequenceNumber\":696215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":696216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":696217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"solaris\",\"moduleSequenceNumber\":696218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"solaris\",\"moduleSequenceNumber\":696219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"solaris\",\"moduleSequenceNumber\":696220}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"solaris\",\"moduleSequenceNumber\":696221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"solaris\",\"moduleSequenceNumber\":696222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"solaris\",\"moduleSequenceNumber\":696223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":696224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"solaris\",\"moduleSequenceNumber\":696225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"solaris\",\"moduleSequenceNumber\":696226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b86f52df-1f58-4a90-9791-9aacd6ffe189\",\"moduleSequenceNumber\":698012}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":698012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":344406515.20000005,\"moneyMax\":1722032576.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":790,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"14.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":696039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":696040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"deltaone\",\"moduleSequenceNumber\":696041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"deltaone\",\"moduleSequenceNumber\":696042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"deltaone\",\"moduleSequenceNumber\":696043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":715028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":696045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":696046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":696047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":696048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":696049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"deltaone\",\"moduleSequenceNumber\":696050}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":696051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"deltaone\",\"moduleSequenceNumber\":696052}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"deltaone\",\"moduleSequenceNumber\":696053}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":696054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"deltaone\",\"moduleSequenceNumber\":696055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":696056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":696057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"deltaone\",\"moduleSequenceNumber\":696058}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":696059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":636604852.4,\"moneyMax\":3183024262,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":54}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"87.8.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24972,\"ramUsage\":4.9,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b056c362-3f0f-46d5-b697-1b10f507b9ae\",\"moduleSequenceNumber\":697957}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681917,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/de11db5b-c9ef-4c8c-9cd6-e083170969bd\",\"moduleSequenceNumber\":697999}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695413}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/c0933be3-9355-44c0-ae12-886ac15c16ce\",\"moduleSequenceNumber\":715114}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":715114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b056c362-3f0f-46d5-b697-1b10f507b9ae\",\"moduleSequenceNumber\":697957}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":697957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"global-pharm\",\"moduleSequenceNumber\":695428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/de11db5b-c9ef-4c8c-9cd6-e083170969bd\",\"moduleSequenceNumber\":697999}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":697999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":694409955.2,\"moneyMax\":3472049776,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"33.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":697215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":697216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nova-med\",\"moduleSequenceNumber\":697217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"nova-med\",\"moduleSequenceNumber\":697218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"nova-med\",\"moduleSequenceNumber\":697219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":715056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":697221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":697222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":697223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":697224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":697225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"nova-med\",\"moduleSequenceNumber\":697226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":697227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"nova-med\",\"moduleSequenceNumber\":697228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"nova-med\",\"moduleSequenceNumber\":697229}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":697230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"nova-med\",\"moduleSequenceNumber\":697231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":697232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":697233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"nova-med\",\"moduleSequenceNumber\":697234}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":697235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":482850724.40000004,\"moneyMax\":2414253622,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"67.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696251}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":715033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696262}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":696269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":549263592,\"moneyMax\":2746317960,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"14.4.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24974,\"ramUsage\":4.9,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f7abf494-229e-4c15-a4c9-d913b3fee332\",\"moduleSequenceNumber\":697958}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681919,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f42a5705-24e0-4f53-b8dc-866d0ce9a020\",\"moduleSequenceNumber\":698000}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":695451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":695452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"unitalife\",\"moduleSequenceNumber\":695453}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"unitalife\",\"moduleSequenceNumber\":695454}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"unitalife\",\"moduleSequenceNumber\":695455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/51fccae9-e9bd-48f4-9191-3ff26f4befab\",\"moduleSequenceNumber\":715115}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":715115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":695457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f7abf494-229e-4c15-a4c9-d913b3fee332\",\"moduleSequenceNumber\":697958}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":697958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":695459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":695460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":695461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"unitalife\",\"moduleSequenceNumber\":695462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":695463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"unitalife\",\"moduleSequenceNumber\":695464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"unitalife\",\"moduleSequenceNumber\":695465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":695466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"unitalife\",\"moduleSequenceNumber\":695467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":695468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":695469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"unitalife\",\"moduleSequenceNumber\":695470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/f42a5705-24e0-4f53-b8dc-866d0ce9a020\",\"moduleSequenceNumber\":698000}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":698000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":434353885.6,\"moneyMax\":2171769428,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"51.3.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25021,\"ramUsage\":4.9,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/dba58b7f-4b29-4d51-bd86-f81a3dae2b19\",\"moduleSequenceNumber\":697981}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681881,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7ea66a50-b374-41e9-888d-d30cb3db4d1f\",\"moduleSequenceNumber\":698023}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/6b03d254-d3ee-434c-a814-87bfafea01a4\",\"moduleSequenceNumber\":715096}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":715096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/dba58b7f-4b29-4d51-bd86-f81a3dae2b19\",\"moduleSequenceNumber\":697981}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":697402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/7ea66a50-b374-41e9-888d-d30cb3db4d1f\",\"moduleSequenceNumber\":698023}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":698023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":319046860.8,\"moneyMax\":1595234304,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":667,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"96.9.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24994,\"ramUsage\":4.9,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b0a4410f-5bc8-46c0-922d-d4a8bbe3daa0\",\"moduleSequenceNumber\":697968}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681934,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/eab931bd-ae8a-4fb1-a3af-5064eb8a3c96\",\"moduleSequenceNumber\":698010}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695915}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695916}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695917}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/0a849e7e-2912-4b0a-890b-1d4a78be139d\",\"moduleSequenceNumber\":715083}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":715083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695919}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/b0a4410f-5bc8-46c0-922d-d4a8bbe3daa0\",\"moduleSequenceNumber\":697968}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":697968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695926}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"rho-construction\",\"moduleSequenceNumber\":695932}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/eab931bd-ae8a-4fb1-a3af-5064eb8a3c96\",\"moduleSequenceNumber\":698010}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":698010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":224004519.60000002,\"moneyMax\":1120022598.0000002,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":479,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"87.2.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25024,\"ramUsage\":4.9,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/26bc05dd-3176-4429-9411-5ae003c2568d\",\"moduleSequenceNumber\":697983}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681885,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ac4ca6c4-c344-4980-aa28-22674ef90888\",\"moduleSequenceNumber\":698025}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/e88afb7d-cb41-452b-a294-67f188d3e6a8\",\"moduleSequenceNumber\":715098}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":715098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/26bc05dd-3176-4429-9411-5ae003c2568d\",\"moduleSequenceNumber\":697983}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":697528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/ac4ca6c4-c344-4980-aa28-22674ef90888\",\"moduleSequenceNumber\":698025}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":698025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":271274494.8,\"moneyMax\":1356372474,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":566,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"62.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24996,\"ramUsage\":4.9,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/68cf43e0-bd3f-4d3a-b7f4-f8982393a8f3\",\"moduleSequenceNumber\":697969}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681936,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2535b7d2-d43c-42ee-b589-bdd1643b8b5a\",\"moduleSequenceNumber\":698011}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695957}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695958}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695959}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/b3916f24-a599-4193-9c7c-9dab76bd11c0\",\"moduleSequenceNumber\":715084}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":715084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695961}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/68cf43e0-bd3f-4d3a-b7f4-f8982393a8f3\",\"moduleSequenceNumber\":697969}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":697969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695966}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695967}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695968}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695969}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695974}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2535b7d2-d43c-42ee-b589-bdd1643b8b5a\",\"moduleSequenceNumber\":698011}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":698011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":133482708.4,\"moneyMax\":667413542,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":419,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"20.0.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24966,\"ramUsage\":4.9,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/18b4531c-8a3d-4bb5-aaef-d441ea067f77\",\"moduleSequenceNumber\":697954}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681911,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fd0692ac-63fe-4533-8d86-172f1fc3e242\",\"moduleSequenceNumber\":697996}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695244}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695245}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/5b10ef37-4fb5-4e76-9643-91dfab3ae82d\",\"moduleSequenceNumber\":715111}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":715111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/18b4531c-8a3d-4bb5-aaef-d441ea067f77\",\"moduleSequenceNumber\":697954}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":697954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":695260}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/fd0692ac-63fe-4533-8d86-172f1fc3e242\",\"moduleSequenceNumber\":697996}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":697996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":82045904.80000001,\"moneyMax\":410229524.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":381,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"51.2.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24969,\"ramUsage\":4.9,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/5b36fe3b-b2dc-41aa-aa69-07ce718b4a9e\",\"moduleSequenceNumber\":697955}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681913,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6aea7d50-2a52-4864-81e6-e3e868d4e80e\",\"moduleSequenceNumber\":697997}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695328}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/c5f26a08-dae1-4a20-b565-963541986739\",\"moduleSequenceNumber\":715112}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":715112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/5b36fe3b-b2dc-41aa-aa69-07ce718b4a9e\",\"moduleSequenceNumber\":697955}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":697955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"zb-institute\",\"moduleSequenceNumber\":695344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6aea7d50-2a52-4864-81e6-e3e868d4e80e\",\"moduleSequenceNumber\":697997}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":697997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":408889536.8,\"moneyMax\":2044447684,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"87.4.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":4.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24992,\"ramUsage\":4.9,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9ec071e7-c9ab-4363-a361-ca960cdaad53\",\"moduleSequenceNumber\":697967}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695873}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695874}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695875}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/a6ff3eab-d071-46a3-a2b9-54598a71923c\",\"moduleSequenceNumber\":715082}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":715082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/9ec071e7-c9ab-4363-a361-ca960cdaad53\",\"moduleSequenceNumber\":697967}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":697967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695883}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695884}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695885}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"summit-uni\",\"moduleSequenceNumber\":695890}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/54d2242c-5d02-43c3-97be-0f05a62e728b\",\"moduleSequenceNumber\":698009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":698009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":139067601.6,\"moneyMax\":695338008,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":452,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"73.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":697341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"syscore\",\"moduleSequenceNumber\":697342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"syscore\",\"moduleSequenceNumber\":697343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"syscore\",\"moduleSequenceNumber\":697344}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"syscore\",\"moduleSequenceNumber\":697345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"syscore\",\"moduleSequenceNumber\":715059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"syscore\",\"moduleSequenceNumber\":697347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"syscore\",\"moduleSequenceNumber\":697348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"syscore\",\"moduleSequenceNumber\":697349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":697350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":697351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"syscore\",\"moduleSequenceNumber\":697352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"syscore\",\"moduleSequenceNumber\":697353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"syscore\",\"moduleSequenceNumber\":697354}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"syscore\",\"moduleSequenceNumber\":697355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"syscore\",\"moduleSequenceNumber\":697356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"syscore\",\"moduleSequenceNumber\":697357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":697358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"syscore\",\"moduleSequenceNumber\":697359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"syscore\",\"moduleSequenceNumber\":697360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":697361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":212519022.8,\"moneyMax\":1062595114,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":565,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"34.1.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25027,\"ramUsage\":4.9,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/c74fd586-c37d-4df2-ba22-47051242a6ea\",\"moduleSequenceNumber\":697984}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681887,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a60a7daf-c33f-41d7-9eee-4507cd90d74c\",\"moduleSequenceNumber\":698026}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":697593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":697594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"catalyst\",\"moduleSequenceNumber\":697595}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":697596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"catalyst\",\"moduleSequenceNumber\":697597}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/4820da9f-22b1-40a9-a4ec-89dce85941e9\",\"moduleSequenceNumber\":715099}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":715099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":697599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/c74fd586-c37d-4df2-ba22-47051242a6ea\",\"moduleSequenceNumber\":697984}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":697984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":697601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":697602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":697603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"catalyst\",\"moduleSequenceNumber\":697604}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":697605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":697606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":697607}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":697608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"catalyst\",\"moduleSequenceNumber\":697609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":697610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":697611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"catalyst\",\"moduleSequenceNumber\":697612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a60a7daf-c33f-41d7-9eee-4507cd90d74c\",\"moduleSequenceNumber\":698026}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":698026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":170581546.8,\"moneyMax\":852907734.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"82.9.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24988,\"ramUsage\":4.9,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/c07cb703-b2cc-43f5-a23e-37c8261c8eec\",\"moduleSequenceNumber\":697965}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681930,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b11275d7-3c59-4ebd-91b5-57b36ed1b7fe\",\"moduleSequenceNumber\":698007}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":695787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":695788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"the-hub\",\"moduleSequenceNumber\":695789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":695790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"the-hub\",\"moduleSequenceNumber\":695791}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/d8e77612-98ae-41b1-abfb-c6f0b5acb81c\",\"moduleSequenceNumber\":715080}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":715080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":695793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/c07cb703-b2cc-43f5-a23e-37c8261c8eec\",\"moduleSequenceNumber\":697965}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":697965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":695795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":695796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":695797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"the-hub\",\"moduleSequenceNumber\":695798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":695799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":695800}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":695801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":695802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"the-hub\",\"moduleSequenceNumber\":695803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":695804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":695805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"the-hub\",\"moduleSequenceNumber\":695806}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b11275d7-3c59-4ebd-91b5-57b36ed1b7fe\",\"moduleSequenceNumber\":698007}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":698007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":62918101.2,\"moneyMax\":314590506,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":297,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"83.0.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"comptek\",\"moduleSequenceNumber\":695115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"comptek\",\"moduleSequenceNumber\":695116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"comptek\",\"moduleSequenceNumber\":695117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"comptek\",\"moduleSequenceNumber\":695118}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"comptek\",\"moduleSequenceNumber\":695119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"comptek\",\"moduleSequenceNumber\":715006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"comptek\",\"moduleSequenceNumber\":695121}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"comptek\",\"moduleSequenceNumber\":695122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"comptek\",\"moduleSequenceNumber\":695123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":695124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":695125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"comptek\",\"moduleSequenceNumber\":695126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"comptek\",\"moduleSequenceNumber\":695127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"comptek\",\"moduleSequenceNumber\":695128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"comptek\",\"moduleSequenceNumber\":695129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"comptek\",\"moduleSequenceNumber\":695130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"comptek\",\"moduleSequenceNumber\":695131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":695132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"comptek\",\"moduleSequenceNumber\":695133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"comptek\",\"moduleSequenceNumber\":695134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":695135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":94674654,\"moneyMax\":473373270,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":384,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"61.6.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24964,\"ramUsage\":4.9,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/5c190e73-dc8b-4bfb-8060-4210626c94ff\",\"moduleSequenceNumber\":697953}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681909,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e9affc66-c364-4d5a-9f29-57db6fb92bfd\",\"moduleSequenceNumber\":697995}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":695199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"netlink\",\"moduleSequenceNumber\":695200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"netlink\",\"moduleSequenceNumber\":695201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"netlink\",\"moduleSequenceNumber\":695202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"netlink\",\"moduleSequenceNumber\":695203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/e564763d-ac68-47ba-b42c-66f8ee5b0824\",\"moduleSequenceNumber\":715110}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"netlink\",\"moduleSequenceNumber\":715110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"netlink\",\"moduleSequenceNumber\":695205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/5c190e73-dc8b-4bfb-8060-4210626c94ff\",\"moduleSequenceNumber\":697953}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"netlink\",\"moduleSequenceNumber\":697953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"netlink\",\"moduleSequenceNumber\":695207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":695208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":695209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"netlink\",\"moduleSequenceNumber\":695210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"netlink\",\"moduleSequenceNumber\":695211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"netlink\",\"moduleSequenceNumber\":695212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"netlink\",\"moduleSequenceNumber\":695213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"netlink\",\"moduleSequenceNumber\":695214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"netlink\",\"moduleSequenceNumber\":695215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":695216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"netlink\",\"moduleSequenceNumber\":695217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"netlink\",\"moduleSequenceNumber\":695218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e9affc66-c364-4d5a-9f29-57db6fb92bfd\",\"moduleSequenceNumber\":697995}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":697995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":110000000,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":395,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"40.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695285}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":715010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695294}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":29006481.6,\"moneyMax\":145032408,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":252,\"serverGrowth\":58}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"59.7.5.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":694989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":694990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":694991}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":694992}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"n00dles\",\"moduleSequenceNumber\":694993}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":715003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":694995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":694996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":694997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":694998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":694999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"n00dles\",\"moduleSequenceNumber\":695000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":695001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":695002}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":695003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":695004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"n00dles\",\"moduleSequenceNumber\":695005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":695006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":695007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":695008}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":695009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":28000,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"55.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24979,\"ramUsage\":4.9,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f6c5dd5b-9fe2-4122-8037-f8c630e86ab2\",\"moduleSequenceNumber\":697960}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681923,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6b4633f7-bd9b-434c-9548-63551bb15c55\",\"moduleSequenceNumber\":698002}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/14b75a12-7b42-41ff-8df9-d38fcd82b5b2\",\"moduleSequenceNumber\":715075}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":715075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f6c5dd5b-9fe2-4122-8037-f8c630e86ab2\",\"moduleSequenceNumber\":697960}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":697960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695589}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695596}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6b4633f7-bd9b-434c-9548-63551bb15c55\",\"moduleSequenceNumber\":698002}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":698002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"89.0.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24982,\"ramUsage\":4.9,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/d0851630-0dc3-4c73-91ef-aacef9e10f8f\",\"moduleSequenceNumber\":697962}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681973,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cbd14c1a-9f3b-402d-93a1-a01ea68de8f7\",\"moduleSequenceNumber\":698004}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695664}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695665}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/357692cf-8f6e-42ba-84cf-9ff47c543e9b\",\"moduleSequenceNumber\":715077}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":715077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/d0851630-0dc3-4c73-91ef-aacef9e10f8f\",\"moduleSequenceNumber\":697962}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":697962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695674}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":695680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/cbd14c1a-9f3b-402d-93a1-a01ea68de8f7\",\"moduleSequenceNumber\":698004}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":698004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":920000,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"89.5.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25030,\"ramUsage\":4.9,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8a09524f-371d-47b6-8963-cdfdc35659cd\",\"moduleSequenceNumber\":697986}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681891,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bf144d39-159d-456e-ae01-a20186b6c4c9\",\"moduleSequenceNumber\":698028}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":697677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":697678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":697679}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":697680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"joesguns\",\"moduleSequenceNumber\":697681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/7dc8418d-58ee-414c-8c3a-9de701fc1772\",\"moduleSequenceNumber\":715101}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":715101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":697683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8a09524f-371d-47b6-8963-cdfdc35659cd\",\"moduleSequenceNumber\":697986}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":697986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":697685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":697686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":697687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"joesguns\",\"moduleSequenceNumber\":697688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":697689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":697690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":697691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":697692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"joesguns\",\"moduleSequenceNumber\":697693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":697694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":697695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":697696}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/bf144d39-159d-456e-ae01-a20186b6c4c9\",\"moduleSequenceNumber\":698028}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":698028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"5.4.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25036,\"ramUsage\":4.9,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/341cbbc7-2f98-4ce2-ac68-e735296ee0f7\",\"moduleSequenceNumber\":697989}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681897,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a9e46d96-0086-4054-ad21-5fa9004a9128\",\"moduleSequenceNumber\":698031}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":697803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"zer0\",\"moduleSequenceNumber\":697804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zer0\",\"moduleSequenceNumber\":697805}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"zer0\",\"moduleSequenceNumber\":697806}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"zer0\",\"moduleSequenceNumber\":697807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/d3f78d85-83cb-46a7-be03-fa0021157417\",\"moduleSequenceNumber\":715104}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zer0\",\"moduleSequenceNumber\":715104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"zer0\",\"moduleSequenceNumber\":697809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/341cbbc7-2f98-4ce2-ac68-e735296ee0f7\",\"moduleSequenceNumber\":697989}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"zer0\",\"moduleSequenceNumber\":697989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"zer0\",\"moduleSequenceNumber\":697811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":697812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":697813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"zer0\",\"moduleSequenceNumber\":697814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"zer0\",\"moduleSequenceNumber\":697815}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"zer0\",\"moduleSequenceNumber\":697816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"zer0\",\"moduleSequenceNumber\":697817}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"zer0\",\"moduleSequenceNumber\":697818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"zer0\",\"moduleSequenceNumber\":697819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":697820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"zer0\",\"moduleSequenceNumber\":697821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"zer0\",\"moduleSequenceNumber\":697822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/a9e46d96-0086-4054-ad21-5fa9004a9128\",\"moduleSequenceNumber\":698031}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":698031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"91.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24984,\"ramUsage\":4.9,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f9ad9ac7-6d3f-4b41-b9b0-5f623e882bea\",\"moduleSequenceNumber\":697963}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681975,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0d8ca60c-5056-4f0c-b8c5-815ac37982ab\",\"moduleSequenceNumber\":698005}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695705}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695706}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695707}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/081bf64c-f819-4c08-b9f0-006b66f69d58\",\"moduleSequenceNumber\":715078}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":715078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695709}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f9ad9ac7-6d3f-4b41-b9b0-5f623e882bea\",\"moduleSequenceNumber\":697963}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":697963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695715}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695716}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695717}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":695722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0d8ca60c-5056-4f0c-b8c5-815ac37982ab\",\"moduleSequenceNumber\":698005}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":698005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1100000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"51.3.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24986,\"ramUsage\":4.9,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/1762dbb0-1786-4bdb-b3d8-2bfcda72a96f\",\"moduleSequenceNumber\":697964}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681977,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0616fb7d-58e4-4b41-b809-dff641c5deae\",\"moduleSequenceNumber\":698006}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":695745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":695746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":695747}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":695748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"neo-net\",\"moduleSequenceNumber\":695749}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/bd5a2d71-8265-4072-9b3a-41dd55fcb084\",\"moduleSequenceNumber\":715079}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":715079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":695751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/1762dbb0-1786-4bdb-b3d8-2bfcda72a96f\",\"moduleSequenceNumber\":697964}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":697964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":695753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":695754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":695755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"neo-net\",\"moduleSequenceNumber\":695756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":695757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":695758}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":695759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":695760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"neo-net\",\"moduleSequenceNumber\":695761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":695762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":695763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":695764}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0616fb7d-58e4-4b41-b809-dff641c5deae\",\"moduleSequenceNumber\":698006}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":698006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"99.0.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25038,\"ramUsage\":4.9,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/42c18aeb-7103-4961-8109-9bfe24ec0733\",\"moduleSequenceNumber\":697990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681899,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ef80d2e-3443-49e2-bf70-6ed3e16fb104\",\"moduleSequenceNumber\":698032}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697847}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697848}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/dbc4c43c-f14f-47c2-be46-fbea7561fc47\",\"moduleSequenceNumber\":715105}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":715105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/42c18aeb-7103-4961-8109-9bfe24ec0733\",\"moduleSequenceNumber\":697990}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697857}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697859}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"silver-helix\",\"moduleSequenceNumber\":697864}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ef80d2e-3443-49e2-bf70-6ed3e16fb104\",\"moduleSequenceNumber\":698032}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":698032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":18000000,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"32.7.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25032,\"ramUsage\":4.9,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/1ab03453-e166-48f9-8784-353b5f80f9cf\",\"moduleSequenceNumber\":697987}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681893,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6eca0b7c-a268-4e6e-a1a4-c2c0e92701f9\",\"moduleSequenceNumber\":698029}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/405ec612-ce41-4b21-8a98-56909177d52e\",\"moduleSequenceNumber\":715102}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":715102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697725}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/1ab03453-e166-48f9-8784-353b5f80f9cf\",\"moduleSequenceNumber\":697987}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697733}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":697738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/6eca0b7c-a268-4e6e-a1a4-c2c0e92701f9\",\"moduleSequenceNumber\":698029}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":698029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1200000,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"25.1.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25034,\"ramUsage\":4.9,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8709ef76-728c-487f-a98a-3caa6b1d8ab2\",\"moduleSequenceNumber\":697988}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681895,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e420314a-bb44-41bc-94ef-b8e60deb4e14\",\"moduleSequenceNumber\":698030}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697763}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697764}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697765}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/7655a647-13a6-4069-a548-37f9b373678c\",\"moduleSequenceNumber\":715103}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":715103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/8709ef76-728c-487f-a98a-3caa6b1d8ab2\",\"moduleSequenceNumber\":697988}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697773}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697775}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":697780}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/e420314a-bb44-41bc-94ef-b8e60deb4e14\",\"moduleSequenceNumber\":698030}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":698030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1600000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"3.8.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24961,\"ramUsage\":4.9,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f8a3daf1-e265-4497-89ab-92ca8fef8098\",\"moduleSequenceNumber\":697951}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681905,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d6980f55-62e0-4f04-8033-b03f7c40c0b4\",\"moduleSequenceNumber\":697993}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":695073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":695074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"phantasy\",\"moduleSequenceNumber\":695075}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":695076}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"phantasy\",\"moduleSequenceNumber\":695077}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/05ea0b57-687b-459f-86d2-1c1534cf3b14\",\"moduleSequenceNumber\":715108}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":715108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":695079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/f8a3daf1-e265-4497-89ab-92ca8fef8098\",\"moduleSequenceNumber\":697951}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":697951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":695081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":695082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":695083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"phantasy\",\"moduleSequenceNumber\":695084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":695085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":695086}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":695087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":695088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"phantasy\",\"moduleSequenceNumber\":695089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":695090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":695091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"phantasy\",\"moduleSequenceNumber\":695092}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/d6980f55-62e0-4f04-8033-b03f7c40c0b4\",\"moduleSequenceNumber\":697993}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":697993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":9600000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"74.4.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24980,\"ramUsage\":4.9,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/cd12ae89-a65e-4cd7-89ab-486978fc7eef\",\"moduleSequenceNumber\":697961}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681925,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/61f0e219-c244-4903-9646-7a1096304dbd\",\"moduleSequenceNumber\":698003}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695621}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695623}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/8df75249-cc93-4293-99ba-66a69941edeb\",\"moduleSequenceNumber\":715076}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":715076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/cd12ae89-a65e-4cd7-89ab-486978fc7eef\",\"moduleSequenceNumber\":697961}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":697961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/61f0e219-c244-4903-9646-7a1096304dbd\",\"moduleSequenceNumber\":698003}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":698003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"62.9.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24963,\"ramUsage\":4.9,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/18d171d5-ddc3-4b53-9558-28cc8b4123d9\",\"moduleSequenceNumber\":697952}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681907,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aa539a74-1616-4be3-9d6b-e3b5687d340c\",\"moduleSequenceNumber\":697994}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":695157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":695158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omega-net\",\"moduleSequenceNumber\":695159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":695160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"omega-net\",\"moduleSequenceNumber\":695161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/3c8230f3-9afe-4dad-a780-32454669cdc7\",\"moduleSequenceNumber\":715109}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":715109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":695163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/18d171d5-ddc3-4b53-9558-28cc8b4123d9\",\"moduleSequenceNumber\":697952}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":697952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":695165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":695166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":695167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"omega-net\",\"moduleSequenceNumber\":695168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":695169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":695170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":695171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":695172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"omega-net\",\"moduleSequenceNumber\":695173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":695174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":695175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"omega-net\",\"moduleSequenceNumber\":695176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/aa539a74-1616-4be3-9d6b-e3b5687d340c\",\"moduleSequenceNumber\":697994}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":697994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":24486479.6,\"moneyMax\":122432398,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":185,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"24.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695537}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695539}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":715016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695549}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":695555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":21624042.400000002,\"moneyMax\":108120212,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":273,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"78.1.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":25.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25040,\"ramUsage\":4.9,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/37fed742-ffa0-4013-95e0-ac2200c8ad8a\",\"moduleSequenceNumber\":697991}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681901,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/67daf7f0-4fb4-48e6-8a97-66e487629585\",\"moduleSequenceNumber\":698033}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697889}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697890}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/29363152-9106-4652-b93f-c70a8f2c376c\",\"moduleSequenceNumber\":715106}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":715106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/37fed742-ffa0-4013-95e0-ac2200c8ad8a\",\"moduleSequenceNumber\":697991}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697899}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697901}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":697906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/67daf7f0-4fb4-48e6-8a97-66e487629585\",\"moduleSequenceNumber\":698033}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":698033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":8000000,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"26.8.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":122.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24970,\"ramUsage\":4.9,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/44761e90-5c5b-447f-a798-a867cf91e521\",\"moduleSequenceNumber\":697956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681915,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":67,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b9ebe551-804a-493b-85f5-ee58746e0cca\",\"moduleSequenceNumber\":697998}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/2cc8e152-33cd-4ad6-b689-cded5eefe7f9\",\"moduleSequenceNumber\":715113}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":715113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/44761e90-5c5b-447f-a798-a867cf91e521\",\"moduleSequenceNumber\":697956}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":697956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":695386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/b9ebe551-804a-493b-85f5-ee58746e0cca\",\"moduleSequenceNumber\":697998}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":697998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":100000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":498,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"62.5.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25013,\"ramUsage\":4.9,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e0b7da0d-d51f-43cd-bed8-ca9c9eb7d376\",\"moduleSequenceNumber\":697977}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681873,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/19edef0f-734a-44e5-af6c-7cc963469817\",\"moduleSequenceNumber\":698019}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697007}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697008}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/ff7dd4a2-892f-437d-853e-56b81b612a2a\",\"moduleSequenceNumber\":715092}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":715092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e0b7da0d-d51f-43cd-bed8-ca9c9eb7d376\",\"moduleSequenceNumber\":697977}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697017}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697018}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697019}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":697024}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/19edef0f-734a-44e5-af6c-7cc963469817\",\"moduleSequenceNumber\":698019}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":698019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":360000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1049,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"7.6.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":715061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697444}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":697445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.3.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":122.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25015,\"ramUsage\":4.9,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/a5a66984-2928-40b0-b36d-f4bd1441e554\",\"moduleSequenceNumber\":697978}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681875,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":67,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/56c2a045-c1d4-4340-a214-9161a7385a47\",\"moduleSequenceNumber\":698020}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697133}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697134}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/8731f5a2-b608-4740-9c72-101864cfa216\",\"moduleSequenceNumber\":715093}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":715093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/a5a66984-2928-40b0-b36d-f4bd1441e554\",\"moduleSequenceNumber\":697978}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697145}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/56c2a045-c1d4-4340-a214-9161a7385a47\",\"moduleSequenceNumber\":698020}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":698020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":535,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"93.4.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":57.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25028,\"ramUsage\":4.9,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e58eaba3-3efb-4476-9912-19e81008b740\",\"moduleSequenceNumber\":697985}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681889,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1a55edbb-0419-4b70-9cd4-366855501828\",\"moduleSequenceNumber\":698027}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/74b3502c-932a-40b3-a36c-f38210ccf1dc\",\"moduleSequenceNumber\":715100}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":715100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/e58eaba3-3efb-4476-9912-19e81008b740\",\"moduleSequenceNumber\":697985}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697649}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":697654}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/1a55edbb-0419-4b70-9cd4-366855501828\",\"moduleSequenceNumber\":698027}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":698027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":341,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"50.5.0.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":122.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24990,\"ramUsage\":4.9,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/fe6a7209-45c4-4bd2-ae6e-cbf40dde1a75\",\"moduleSequenceNumber\":697966}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681813,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":67,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/de40a5b8-c133-46ef-a3e5-a19895009c76\",\"moduleSequenceNumber\":698008}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695831}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695833}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/e50c5344-6a34-4d81-a4a0-bbad69afeee5\",\"moduleSequenceNumber\":715081}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":715081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695835}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/fe6a7209-45c4-4bd2-ae6e-cbf40dde1a75\",\"moduleSequenceNumber\":697966}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":697966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695842}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":695848}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/de40a5b8-c133-46ef-a3e5-a19895009c76\",\"moduleSequenceNumber\":698008}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":698008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"97.9.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":10.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25004,\"ramUsage\":4.9,\"server\":\".\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/cd2f92d2-1f1a-433a-966f-04e041b406c7\",\"moduleSequenceNumber\":697973}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":681865,\"ramUsage\":1.75,\"server\":\".\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2cc3a276-5df5-4ef2-b2a3-62c1a3ff9c14\",\"moduleSequenceNumber\":698015}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":696417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\".\",\"moduleSequenceNumber\":696418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\".\",\"moduleSequenceNumber\":696419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\".\",\"moduleSequenceNumber\":696420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\".\",\"moduleSequenceNumber\":696421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/10e2e0ed-649f-4d6c-94a0-92b3fef132bc\",\"moduleSequenceNumber\":715088}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\".\",\"moduleSequenceNumber\":715088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\".\",\"moduleSequenceNumber\":696423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/cd2f92d2-1f1a-433a-966f-04e041b406c7\",\"moduleSequenceNumber\":697973}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\".\",\"moduleSequenceNumber\":697973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\".\",\"moduleSequenceNumber\":696425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":696426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":696427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\".\",\"moduleSequenceNumber\":696428}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\".\",\"moduleSequenceNumber\":696429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\".\",\"moduleSequenceNumber\":696430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\".\",\"moduleSequenceNumber\":696431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\".\",\"moduleSequenceNumber\":696432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\".\",\"moduleSequenceNumber\":696433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":696434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\".\",\"moduleSequenceNumber\":696435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\".\",\"moduleSequenceNumber\":696436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/2cc3a276-5df5-4ef2-b2a3-62c1a3ff9c14\",\"moduleSequenceNumber\":698015}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":698015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"49.3.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":24960,\"ramUsage\":4.9,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/3e52402e-f18f-40ad-8fd0-57ce48c44e63\",\"moduleSequenceNumber\":697950}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":695031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":695032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":695033}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":695034}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"CSEC\",\"moduleSequenceNumber\":695035}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":715004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":695037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/3e52402e-f18f-40ad-8fd0-57ce48c44e63\",\"moduleSequenceNumber\":697950}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":697950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":695039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":695040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":695041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"CSEC\",\"moduleSequenceNumber\":695042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":695043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":695044}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":695045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":695046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"CSEC\",\"moduleSequenceNumber\":695047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":695048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":695049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":695050}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/83611120-b358-43a4-bfdf-3261911b5c2a\",\"moduleSequenceNumber\":697992}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":697992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"24.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696504}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":715039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":696521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"35.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":715040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696549}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696554}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":696563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":15000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"67.1.4.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":697929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":697930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"darkweb\",\"moduleSequenceNumber\":697931}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"darkweb\",\"moduleSequenceNumber\":697932}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"darkweb\",\"moduleSequenceNumber\":697933}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":715073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":697935}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":697936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":697937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":697938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":697939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"darkweb\",\"moduleSequenceNumber\":697940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":697941}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"darkweb\",\"moduleSequenceNumber\":697942}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"darkweb\",\"moduleSequenceNumber\":697943}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":697944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"darkweb\",\"moduleSequenceNumber\":697945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":697946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":697947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"darkweb\",\"moduleSequenceNumber\":697948}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":697949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"SERVER_1048576GB\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"SERVER_1048576GB\",\"httpPortOpen\":false,\"ip\":\"1.5.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048569.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[100,\"execMax.js\",\"weaken.js\",\"joesguns\"],\"dataMap\":{},\"filename\":\"forever.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1313.4100000001615,\"pid\":25043,\"ramUsage\":4.9,\"server\":\"SERVER_1048576GB\",\"threads\":1,\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/2c5e0847-2320-47fa-bcb0-76bb26e5a121\",\"moduleSequenceNumber\":704136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":681903,\"ramUsage\":1.75,\"server\":\"SERVER_1048576GB\",\"threads\":599180,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ee64768-456f-4310-853f-57165e2b6b33\",\"moduleSequenceNumber\":704137}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction solveContract(ns, contract, hostname) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`There is no solver for '${type}'.`);\\n\\t\\t\\tns.tprint(description);\\n\\t\\t\\treturn;\\n\\t}\\n\\tns.tprint(`A solver for ${type} was found.`);\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`Correct answer: ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `The attempt to ${type} has failed.\\\\n`;\\n\\t\\tmessage += `You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n *  There is no solver for 'Subarray with Maximum Sum'.\\n *  Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tif(sub.length == (new Set(sub)).size) {\\n\\t\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\tconst prices = data;\\n\\tlet dp = [0, -1 << 30];\\n\\tfor(const price of prices) {\\n\\t\\tconst ndp = [0, 0];\\n\\t\\tndp[0] = Math.max(dp[0], dp[1] + price);\\n\\t\\tndp[1] = Math.max(dp[0] - price, dp[1]);\\n\\t\\tdp = ndp;\\n\\t}\\n\\treturn dp[0];\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\tfor(const contract of contracts) {\\n\\t\\t\\tns.tprint(`A contract was found at ${hostname}.`);\\n\\t\\t\\tsolveContract(ns, contract, hostname);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704117}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/788adb08-54d6-4c73-8cba-8350d89ab99d\",\"moduleSequenceNumber\":715107}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":715107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/2c5e0847-2320-47fa-bcb0-76bb26e5a121\",\"moduleSequenceNumber\":704136}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang setTaskAll [task]\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704124}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.45,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tns.tprint(scripts);\\n\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tconst server_list = await scanAll(ns);\\n\\tfor(let server of server_list) {\\n\\t\\tserver = ns.getServer(server);\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer('purchased_server', ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/5ee64768-456f-4310-853f-57165e2b6b33\",\"moduleSequenceNumber\":704137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"SERVER_1048576GB\",\"moduleSequenceNumber\":704137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":29.9168,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":7.315,\"isBanned\":false,\"isMember\":true,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":106.5617,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":403417.2691100811}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":13.2624,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":21.9271,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":438.472,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":20922308.379146446}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":29.6955,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"forever\":\"run forever.js\",\"server\":\"run server.js\",\"buyAll\":\"connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; home;\",\"path\":\"run server.js path CSEC; run server.js path avmnite-02h; run server.js path I.I.I.I; run server.js path run4theh111z;\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":true}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":25047.50768254453,\"lastPrice\":25067.130213694723,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.937605724577143,\"otlkMagForecast\":30.75605553720414,\"cap\":536956143,\"spreadPerc\":0.4,\"shareTxForMovement\":77382,\"shareTxUntilMovement\":77382,\"totalShares\":102500000,\"maxShares\":20500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":34791.59316092345,\"lastPrice\":34821.44515633573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":19.55577901604901,\"otlkMagForecast\":68.62671791082634,\"cap\":69654447,\"spreadPerc\":0.1,\"shareTxForMovement\":73052,\"shareTxUntilMovement\":73052,\"totalShares\":94000000,\"maxShares\":18800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":9692.628395501964,\"lastPrice\":9678.546990683657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":13.609838495724855,\"otlkMagForecast\":36.79253436370706,\"cap\":235998435,\"spreadPerc\":0.5,\"shareTxForMovement\":65065,\"shareTxUntilMovement\":65065,\"totalShares\":110900000,\"maxShares\":22200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":17838.362539201546,\"lastPrice\":17859.990200568827,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":11.939868084553117,\"otlkMagForecast\":37.669067993807985,\"cap\":112848692,\"spreadPerc\":0.1,\"shareTxForMovement\":73768,\"shareTxUntilMovement\":73768,\"totalShares\":101900000,\"maxShares\":20400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":34949.91404673668,\"lastPrice\":34906.29062565719,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":12.795133661012496,\"otlkMagForecast\":38.2846855719583,\"cap\":765100774,\"spreadPerc\":0.1,\"shareTxForMovement\":66747,\"shareTxUntilMovement\":66747,\"totalShares\":48200000,\"maxShares\":9600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":58517.73237575098,\"lastPrice\":58629.06664898143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":20.78242069030346,\"otlkMagForecast\":67.60718730884105,\"cap\":1289066679,\"spreadPerc\":0.2,\"shareTxForMovement\":50128,\"shareTxUntilMovement\":50128,\"totalShares\":28600000,\"maxShares\":5700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":29221.1384348762,\"lastPrice\":29262.562426218094,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":10.614468501103184,\"otlkMagForecast\":40.366191606498774,\"cap\":622018125,\"spreadPerc\":0.5,\"shareTxForMovement\":75868,\"shareTxUntilMovement\":75868,\"totalShares\":68700000,\"maxShares\":13700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":35221.5233081445,\"lastPrice\":35139.59236570775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":14.597291145896095,\"otlkMagForecast\":64.93600441786161,\"cap\":660090197,\"spreadPerc\":0.6,\"shareTxForMovement\":55042,\"shareTxUntilMovement\":55042,\"totalShares\":55800000,\"maxShares\":11200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":20943.824338064467,\"lastPrice\":20975.467671229973,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":6.749231507409385,\"otlkMagForecast\":57.28354268467836,\"cap\":190929516,\"spreadPerc\":0.6,\"shareTxForMovement\":60842,\"shareTxUntilMovement\":60842,\"totalShares\":57900000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16119.88242250366,\"lastPrice\":16100.961879787086,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":9.709359361978601,\"otlkMagForecast\":59.920387114556554,\"cap\":155106832,\"spreadPerc\":1,\"shareTxForMovement\":51120,\"shareTxUntilMovement\":51120,\"totalShares\":65900000,\"maxShares\":13200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11170.332649692251,\"lastPrice\":11158.053122231733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":8.621261779941753,\"otlkMagForecast\":59.053726431132205,\"cap\":220684812,\"spreadPerc\":0.9,\"shareTxForMovement\":101092,\"shareTxUntilMovement\":101092,\"totalShares\":80900000,\"maxShares\":16200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13384.906660752293,\"lastPrice\":13402.383166546926,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.688760664651684,\"otlkMagForecast\":56.86452389187034,\"cap\":41131301,\"spreadPerc\":1,\"shareTxForMovement\":89987,\"shareTxUntilMovement\":89987,\"totalShares\":85000000,\"maxShares\":17000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15123.052513492143,\"lastPrice\":15142.79849466208,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.715968159603327,\"otlkMagForecast\":57.28364038905192,\"cap\":177829892,\"spreadPerc\":0.5,\"shareTxForMovement\":62234,\"shareTxUntilMovement\":62234,\"totalShares\":63800000,\"maxShares\":12800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":18879.333904811567,\"lastPrice\":18896.941412642635,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":9.7668209409349,\"otlkMagForecast\":40.335087291054066,\"cap\":86075308,\"spreadPerc\":0.4,\"shareTxForMovement\":53610,\"shareTxUntilMovement\":53610,\"totalShares\":52700000,\"maxShares\":10500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11456.387559985016,\"lastPrice\":11442.727558386476,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.517852478162173,\"otlkMagForecast\":56.04818966355789,\"cap\":41789949,\"spreadPerc\":0.6,\"shareTxForMovement\":107119,\"shareTxUntilMovement\":107119,\"totalShares\":61000000,\"maxShares\":12200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8493.344609255151,\"lastPrice\":8503.642145291933,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":1.9787502502701675,\"otlkMagForecast\":44.892913258074316,\"cap\":46444168,\"spreadPerc\":1.1,\"shareTxForMovement\":64685,\"shareTxUntilMovement\":64685,\"totalShares\":82700000,\"maxShares\":16500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":23025.058706789696,\"lastPrice\":23056.410676046693,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":8.42140408589586,\"otlkMagForecast\":40.58526397456577,\"cap\":56313692,\"spreadPerc\":0.9,\"shareTxForMovement\":44976,\"shareTxUntilMovement\":44976,\"totalShares\":26300000,\"maxShares\":5300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":13457.951614727455,\"lastPrice\":13473.515279587407,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":11.33322512179301,\"otlkMagForecast\":39.33592751860767,\"cap\":297284268,\"spreadPerc\":0.9,\"shareTxForMovement\":74880,\"shareTxUntilMovement\":74880,\"totalShares\":54600000,\"maxShares\":10900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":15848.54037006976,\"lastPrice\":15827.284439536883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.329309229803758,\"otlkMagForecast\":45.04064103694604,\"cap\":68652663,\"spreadPerc\":0.6,\"shareTxForMovement\":118663,\"shareTxUntilMovement\":118663,\"totalShares\":33700000,\"maxShares\":6700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3636.9565471303054,\"lastPrice\":3620.3443831312557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.46,\"b\":false,\"otlkMag\":1.3510875956274542,\"otlkMagForecast\":49.846023979684254,\"cap\":53195605,\"spreadPerc\":1.2,\"shareTxForMovement\":26822,\"shareTxUntilMovement\":26822,\"totalShares\":111500000,\"maxShares\":22300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5440.781083138601,\"lastPrice\":5428.326983673172,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":false,\"otlkMag\":5.981405047099601,\"otlkMagForecast\":43.75164673192401,\"cap\":91192731,\"spreadPerc\":0.7,\"shareTxForMovement\":91495,\"shareTxUntilMovement\":91495,\"totalShares\":49600000,\"maxShares\":9900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3276.462289033798,\"lastPrice\":3273.0434314237955,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":1.4183623744807274,\"otlkMagForecast\":48.270974477266364,\"cap\":47435450,\"spreadPerc\":0.3,\"shareTxForMovement\":80736,\"shareTxUntilMovement\":80736,\"totalShares\":62400000,\"maxShares\":12500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":7590.480743653766,\"lastPrice\":7619.080469535494,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.02,\"b\":false,\"otlkMag\":8.953737738052943,\"otlkMagForecast\":40.099284674475335,\"cap\":11469006,\"spreadPerc\":0.7,\"shareTxForMovement\":38448,\"shareTxUntilMovement\":38448,\"totalShares\":39900000,\"maxShares\":8000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7282.157998629933,\"lastPrice\":7303.2119208375025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":2.3048258029424202,\"otlkMagForecast\":52.87248320878225,\"cap\":121665852,\"spreadPerc\":0.5,\"shareTxForMovement\":36449,\"shareTxUntilMovement\":36449,\"totalShares\":27400000,\"maxShares\":5500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5496.696163540703,\"lastPrice\":5487.688475441345,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":false,\"otlkMag\":3.357719444370929,\"otlkMagForecast\":44.059185687722476,\"cap\":122409699,\"spreadPerc\":0.5,\"shareTxForMovement\":119002,\"shareTxUntilMovement\":119002,\"totalShares\":31300000,\"maxShares\":6300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2341.7147293393305,\"lastPrice\":2355.1679393709974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.08,\"b\":true,\"otlkMag\":0.7003438402512981,\"otlkMagForecast\":51.134759555999416,\"cap\":23379630,\"spreadPerc\":1.6,\"shareTxForMovement\":43039,\"shareTxUntilMovement\":43039,\"totalShares\":54700000,\"maxShares\":10900000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2776.0781488308025,\"lastPrice\":2781.463403491937,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":1.4950091930122205,\"otlkMagForecast\":50.02858804067111,\"cap\":25593949,\"spreadPerc\":1,\"shareTxForMovement\":52117,\"shareTxUntilMovement\":52117,\"totalShares\":23100000,\"maxShares\":4600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3889.1565862924094,\"lastPrice\":3883.868134440892,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":3.419277290080477,\"otlkMagForecast\":51.01693908876265,\"cap\":6560694,\"spreadPerc\":0.9,\"shareTxForMovement\":69111,\"shareTxUntilMovement\":69111,\"totalShares\":11100000,\"maxShares\":2200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2084.746179925904,\"lastPrice\":2079.084228255158,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.46,\"b\":true,\"otlkMag\":1.7497763254829342,\"otlkMagForecast\":47.56547917568866,\"cap\":11551595,\"spreadPerc\":0.7,\"shareTxForMovement\":57741,\"shareTxUntilMovement\":57741,\"totalShares\":14900000,\"maxShares\":3000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1254.6015640838705,\"lastPrice\":1261.3412480251006,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.88,\"b\":true,\"otlkMag\":6.0046880818352175,\"otlkMagForecast\":48.89336539233228,\"cap\":17342160,\"spreadPerc\":1.3,\"shareTxForMovement\":49181,\"shareTxUntilMovement\":49181,\"totalShares\":46500000,\"maxShares\":9300000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1393.904159560647,\"lastPrice\":1390.1184622603816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.46,\"b\":true,\"otlkMag\":12.136044861820803,\"otlkMagForecast\":63.602340268329954,\"cap\":8539254,\"spreadPerc\":1.4,\"shareTxForMovement\":71054,\"shareTxUntilMovement\":71054,\"totalShares\":125900000,\"maxShares\":25200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":20099.130381491577,\"lastPrice\":20128.747689170494,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":8.574717502034625,\"otlkMagForecast\":41.645798827935046,\"cap\":67163557,\"spreadPerc\":0.7,\"shareTxForMovement\":151261,\"shareTxUntilMovement\":151261,\"totalShares\":16700000,\"maxShares\":3300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":17404.810213148576,\"lastPrice\":17387.296950960925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":10.395614037096177,\"otlkMagForecast\":39.10909572809017,\"cap\":202583936,\"spreadPerc\":0.2,\"shareTxForMovement\":99357,\"shareTxUntilMovement\":99357,\"totalShares\":26600000,\"maxShares\":5300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":24,\"lastUpdate\":1643661163780,\"ticksUntilCycle\":51}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":60,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":6178.36235991848,\"territory\":0.8036579554225508},\"Tetrads\":{\"power\":728.3318899293797,\"territory\":0},\"The Syndicate\":{\"power\":736.4326045930247,\"territory\":0},\"The Dark Army\":{\"power\":793.8395942966333,\"territory\":0},\"Speakers for the Dead\":{\"power\":29.527997159011473,\"territory\":0.1811779136238161},\"NiteSec\":{\"power\":812.7343561669693,\"territory\":0},\"The Black Hand\":{\"power\":3.1739338559685666,\"territory\":0.015164130953631748}}","LastExportBonus":"1643658550563","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643661168757"}}