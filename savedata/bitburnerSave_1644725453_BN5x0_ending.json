{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":41,\"hp\":69,\"max_hp\":69,\"strength\":727,\"defense\":594,\"dexterity\":107,\"agility\":130,\"charisma\":16,\"intelligence\":1,\"hacking_chance_mult\":8.556086919845221,\"hacking_speed_mult\":6.526741096933931,\"hacking_money_mult\":72.54148219790486,\"hacking_grow_mult\":11.793428330508235,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":9.27,\"hacking_mult\":41.138797440413875,\"strength_mult\":725.5691285341237,\"defense_mult\":592.5404700288915,\"dexterity_mult\":107.68838210231996,\"agility_mult\":129.9530604985478,\"charisma_mult\":16.250262248790253,\"hacking_exp_mult\":27.531613456206895,\"strength_exp_mult\":5.8699900679623305,\"defense_exp_mult\":5.8699900679623305,\"dexterity_exp_mult\":6.750488578156679,\"agility_exp_mult\":5.8699900679623305,\"charisma_exp_mult\":10.777780060265865,\"company_rep_mult\":34.90087293066164,\"faction_rep_mult\":4.8601100560361905,\"money\":262453698400.46246,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"The Red Pill\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":2,\"n\":2},{\"lvl\":2,\"n\":3},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":-54603.25,\"crime_money_mult\":7.444818869706358,\"crime_success_mult\":3.9838495623846693,\"isWorking\":false,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":192,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":1,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":8.025998214757488,\"hacknet_node_money_mult\":4.5324391441444165,\"hacknet_node_purchase_cost_mult\":0.3909813448639969,\"hacknet_node_ram_cost_mult\":0.5110867253124143,\"hacknet_node_core_cost_mult\":0.5110867253124143,\"hacknet_node_level_cost_mult\":0.4344237165155522,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Terrorism\",\"earnedRespect\":28515493140.57183,\"hack\":3865,\"str\":1345826,\"def\":442228,\"dex\":26905,\"agi\":96837,\"cha\":2789,\"hack_exp\":109299.88491797613,\"str_exp\":14670728.464359181,\"def_exp\":5742314.734331422,\"dex_exp\":864022.6725037907,\"agi_exp\":653768.9858865936,\"cha_exp\":109856.77122507233,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":196922.7620617401,\"str_asc_points\":39462268.23063662,\"def_asc_points\":18292245.537641797,\"dex_asc_points\":5210303.32868251,\"agi_asc_points\":6765837.411280079,\"cha_asc_points\":248316.74133688217,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"00\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":34101804.96696662,\"hack\":2594,\"str\":1120481,\"def\":385218,\"dex\":25052,\"agi\":89460,\"cha\":2225,\"hack_exp\":58863.25205465006,\"str_exp\":11549594.624746941,\"def_exp\":4718921.46138042,\"dex_exp\":756548.9941182615,\"agi_exp\":572745.0462471647,\"cha_exp\":99785.25165403195,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":113232.23900255453,\"str_asc_points\":28676112.994687118,\"def_asc_points\":14483937.769838247,\"dex_asc_points\":4683556.379441196,\"agi_asc_points\":5994159.229319034,\"cha_asc_points\":163827.66852043514,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"01\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":29765418.5783658,\"hack\":3046,\"str\":951027,\"def\":350951,\"dex\":24915,\"agi\":81338,\"cha\":2576,\"hack_exp\":67074.17287287764,\"str_exp\":10004148.881869778,\"def_exp\":4362078.1164254835,\"dex_exp\":756894.0396776989,\"agi_exp\":537517.7827126505,\"cha_exp\":112657.01105792822,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":147894.00578429273,\"str_asc_points\":21264196.89847092,\"def_asc_points\":12231787.318916287,\"dex_asc_points\":4631938.047679648,\"agi_asc_points\":5046100.572681814,\"cha_asc_points\":209808.79392265258,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"02\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":27562109.4129393,\"hack\":2936,\"str\":890015,\"def\":322904,\"dex\":22466,\"agi\":73569,\"cha\":2494,\"hack_exp\":64132.718982589504,\"str_exp\":9669798.78620857,\"def_exp\":4153509.1193183865,\"dex_exp\":708744.6353433611,\"agi_exp\":542453.0103205675,\"cha_exp\":107989.2821574864,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":140020.6265284128,\"str_asc_points\":18752309.62215618,\"def_asc_points\":10468020.84343347,\"dex_asc_points\":3834718.6314121634,\"agi_asc_points\":4117283.9821995064,\"cha_asc_points\":199792.5838673167,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"04\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":27759925.12641186,\"hack\":2952,\"str\":895714,\"def\":326461,\"dex\":22444,\"agi\":74091,\"cha\":2520,\"hack_exp\":64421.17744765322,\"str_exp\":9725984.540105872,\"def_exp\":4194662.375192117,\"dex_exp\":708149.7668113662,\"agi_exp\":545815.7012713806,\"cha_exp\":108945.68631197975,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":141283.03890554348,\"str_asc_points\":18970860.938814554,\"def_asc_points\":10676484.237612939,\"dex_asc_points\":3828284.1668330873,\"agi_asc_points\":4168488.6642417805,\"cha_asc_points\":203347.17024325856,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"05\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":29826978.98514151,\"hack\":4026,\"str\":974432,\"def\":341705,\"dex\":23934,\"agi\":76057,\"cha\":3294,\"hack_exp\":83417.09831093343,\"str_exp\":10499122.446495289,\"def_exp\":4370583.424842397,\"dex_exp\":749304.4612703052,\"agi_exp\":558463.491231464,\"cha_exp\":136642.16148414853,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":236887.8948592365,\"str_asc_points\":22106800.509781137,\"def_asc_points\":11590790.89130688,\"dex_asc_points\":4286181.633164937,\"agi_asc_points\":4363913.659076167,\"cha_asc_points\":319880.3051417394,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"06\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":30666351.628898058,\"hack\":3043,\"str\":1012222,\"def\":346334,\"dex\":22468,\"agi\":75817,\"cha\":2534,\"hack_exp\":66057.3156188939,\"str_exp\":10868416.522956476,\"def_exp\":4423861.665756823,\"dex_exp\":708824.1862365949,\"agi_exp\":556922.2799671256,\"cha_exp\":109445.42675181571,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":148550.64901349405,\"str_asc_points\":23689311.508033857,\"def_asc_points\":11875101.169990987,\"dex_asc_points\":3835579.5124605363,\"agi_asc_points\":4339860.404384748,\"cha_asc_points\":205216.98038678773,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"08\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":30355714.86609335,\"hack\":2594,\"str\":1002279,\"def\":342724,\"dex\":22007,\"agi\":75259,\"cha\":2250,\"hack_exp\":57885.308797614925,\"str_exp\":10771367.42266792,\"def_exp\":4382316.2994822245,\"dex_exp\":696030.3985575313,\"agi_exp\":553334.794622313,\"cha_exp\":99028.37257762047,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":114069.46902934006,\"str_asc_points\":23268134.82043538,\"def_asc_points\":11653105.60810604,\"dex_asc_points\":3698369.9288245933,\"agi_asc_points\":4284128.964943963,\"cha_asc_points\":168010.8538298599,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"09\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":31355230.318938766,\"hack\":2889,\"str\":1034629,\"def\":356586,\"dex\":22481,\"agi\":76880,\"cha\":2426,\"hack_exp\":63277.12794850592,\"str_exp\":11086835.221628921,\"def_exp\":4541629.747080996,\"dex_exp\":709180.4152460448,\"agi_exp\":563747.1649529083,\"cha_exp\":105503.4564549719,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":136309.53274205743,\"str_asc_points\":24651030.355357144,\"def_asc_points\":12515773.460054405,\"dex_asc_points\":3839435.7240694007,\"agi_asc_points\":4446879.048278994,\"cha_asc_points\":190700.32405209495,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":28494522.560565718,\"hack\":1836,\"str\":945573,\"def\":317117,\"dex\":17866,\"agi\":66289,\"cha\":1738,\"hack_exp\":43568.62297336353,\"str_exp\":10216309.082373008,\"def_exp\":4086469.0098912953,\"dex_exp\":579754.8771522451,\"agi_exp\":495250.5524875399,\"cha_exp\":79766.61762337183,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":64621.99760474098,\"str_asc_points\":20931865.61229852,\"def_asc_points\":10132827.785484683,\"dex_asc_points\":2565917.8967185416,\"agi_asc_points\":3431914.920213822,\"cha_asc_points\":109008.51132524504,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":32334025.52349869,\"hack\":2614,\"str\":1084045,\"def\":356114,\"dex\":19956,\"agi\":72601,\"cha\":2284,\"hack_exp\":58236.741100372325,\"str_exp\":11567163.301797943,\"def_exp\":4536217.313213557,\"dex_exp\":638766.0247723183,\"agi_exp\":536210.286558369,\"cha_exp\":100280.55822797203,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":115458.74678842907,\"str_asc_points\":26833271.475863907,\"def_asc_points\":12485960.183644047,\"dex_asc_points\":3114852.967494327,\"agi_asc_points\":4023063.22395642,\"cha_asc_points\":172286.6159649048,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"BitWire\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Synthetic Heart\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"12\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Traffick Illegal Arms\",\"earnedRespect\":24997782.415168248,\"hack\":880,\"str\":851831,\"def\":254785,\"dex\":11283,\"agi\":49087,\"cha\":1265,\"hack_exp\":24050.750243748786,\"str_exp\":9292537.735005628,\"def_exp\":3356808.4680647883,\"dex_exp\":388289.402125468,\"agi_exp\":381246.3762201721,\"cha_exp\":61246.07798301533,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":19692.00638378446,\"str_asc_points\":17317634.026242163,\"def_asc_points\":6837342.986068367,\"dex_asc_points\":1150972.662736177,\"agi_asc_points\":2033752.1457661563,\"cha_asc_points\":64265.016145717695,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synthetic Heart\",\"Synfibril Muscle\",\"BitWire\",\"Neuralstimulator\",\"DataJack\",\"Graphene Bone Lacings\"],\"name\":\"13\"}}],\"wanted\":19218.674955231734,\"respect\":28842681600.783,\"isHackingGang\":false,\"respectGainRate\":1777403.1862882648,\"wantedGainRate\":0.00018654030760549054,\"moneyGainRate\":6520566372.310612,\"storedCycles\":3,\"storedTerritoryAndPowerCycles\":74,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Z\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"S\",\"type\":\"Software\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":0,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prodMats\":[\"AICores\"],\"products\":{\"0_0\":{\"ctor\":\"Product\",\"data\":{\"name\":\"0_0\",\"dmd\":0.001,\"cmp\":1.1988000000000016,\"mku\":0,\"pCost\":0,\"sCost\":0,\"fin\":false,\"prog\":81.0807264747061,\"createCity\":\"Aevum\",\"designCost\":0,\"advCost\":0,\"rat\":0,\"qlt\":0,\"per\":0,\"dur\":0,\"rel\":0,\"aes\":0,\"fea\":0,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0,\"reqMats\":{},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":0,\"popularity\":0,\"startingCost\":25000000000,\"reFac\":0.15,\"sciFac\":0.62,\"hwFac\":0.25,\"robFac\":0.05,\"aiFac\":0.18,\"advFac\":0.16,\"prodMult\":6.922544901937836,\"upgrades\":[28,0],\"state\":\"EXPORT\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NcB6FEu\",\"mor\":100,\"hap\":99.99765466074895,\"ene\":99.99765466074895,\"int\":76,\"cha\":70,\"exp\":80.05800000000008,\"cre\":89,\"eff\":93,\"sal\":1218,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m6CNdzK\",\"mor\":100,\"hap\":99.99702521683972,\"ene\":99.99702521683972,\"int\":68,\"cha\":90,\"exp\":90.05800000000008,\"cre\":56,\"eff\":68,\"sal\":1110,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"twjN8Vu\",\"mor\":100,\"hap\":99.99812882336262,\"ene\":99.99812882336262,\"int\":57,\"cha\":94,\"exp\":71.05800000000008,\"cre\":54,\"eff\":81,\"sal\":1065,\"loc\":\"\",\"pos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":235.84396768058633,\"Engineer\":253.97749499811667,\"Business\":0,\"Management\":302.9437893808693,\"Research & Development\":0,\"total\":792.7652520595723,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":3}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ImF0n4e\",\"mor\":100,\"hap\":99.99838196427069,\"ene\":99.99838196427069,\"int\":95,\"cha\":66,\"exp\":92.04900000000008,\"cre\":97,\"eff\":78,\"sal\":1278,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xrOsU4N\",\"mor\":100,\"hap\":99.99861178363926,\"ene\":99.99861178363926,\"int\":56,\"cha\":84,\"exp\":82.04900000000008,\"cre\":92,\"eff\":93,\"sal\":1215,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2CoFh9d\",\"mor\":100,\"hap\":99.99840560281429,\"ene\":99.99840560281429,\"int\":91,\"cha\":59,\"exp\":81.04900000000008,\"cre\":91,\"eff\":53,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":263.0416966721839,\"Engineer\":271.46484333732354,\"Business\":0,\"Management\":298.0393549994088,\"Research & Development\":0,\"total\":832.5458950089162,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":3}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gcdHvcb\",\"mor\":100,\"hap\":99.99830514471114,\"ene\":99.99830514471114,\"int\":63,\"cha\":60,\"exp\":84.93800000000007,\"cre\":64,\"eff\":96,\"sal\":1098,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6e5EONf\",\"mor\":100,\"hap\":99.99970034419518,\"ene\":99.99970034419518,\"int\":88,\"cha\":69,\"exp\":62.93800000000007,\"cre\":61,\"eff\":75,\"sal\":1062,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2dd75Ag\",\"mor\":100,\"hap\":99.99943510093881,\"ene\":99.99943510093881,\"int\":66,\"cha\":90,\"exp\":90.93800000000007,\"cre\":50,\"eff\":51,\"sal\":1038,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":215.5355648626011,\"Engineer\":292.397088332986,\"Business\":0,\"Management\":265.63640800301164,\"Research & Development\":0,\"total\":773.5690611985987,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":3}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CEloEz8\",\"mor\":100,\"hap\":99.9998377538475,\"ene\":99.9998377538475,\"int\":78,\"cha\":76,\"exp\":79.04900000000008,\"cre\":61,\"eff\":86,\"sal\":1134,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CDVOiTb\",\"mor\":100,\"hap\":99.99948432428837,\"ene\":99.99948432428837,\"int\":51,\"cha\":77,\"exp\":91.04900000000008,\"cre\":84,\"eff\":81,\"sal\":1146,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AdhuUBb\",\"mor\":100,\"hap\":99.9990811520979,\"ene\":99.9990811520979,\"int\":73,\"cha\":50,\"exp\":76.04900000000008,\"cre\":54,\"eff\":77,\"sal\":984,\"loc\":\"\",\"pos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":252.3463974017075,\"Engineer\":269.06855527029774,\"Business\":0,\"Management\":303.4480153321442,\"Research & Development\":0,\"total\":824.8629680041495,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":3}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VeVVd4u\",\"mor\":100,\"hap\":99.99752495880206,\"ene\":99.99752495880206,\"int\":94,\"cha\":91,\"exp\":74.04900000000008,\"cre\":91,\"eff\":77,\"sal\":1275,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oEmRDLE\",\"mor\":100,\"hap\":99.99927937819946,\"ene\":99.99927937819946,\"int\":55,\"cha\":55,\"exp\":67.04900000000008,\"cre\":81,\"eff\":82,\"sal\":1014,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"glvlz7q\",\"mor\":100,\"hap\":99.99735489340861,\"ene\":99.99735489340861,\"int\":50,\"cha\":61,\"exp\":89.04900000000008,\"cre\":85,\"eff\":72,\"sal\":1065,\"loc\":\"\",\"pos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":228.04571327022276,\"Engineer\":261.65965709708945,\"Business\":0,\"Management\":328.13275655513723,\"Research & Development\":0,\"total\":817.8381269224494,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":3}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"y14nAsh\",\"mor\":100,\"hap\":99.99994062398697,\"ene\":99.99994062398697,\"int\":87,\"cha\":93,\"exp\":61.04900000000008,\"cre\":82,\"eff\":65,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"t7veksY\",\"mor\":100,\"hap\":99.99945203422283,\"ene\":99.99945203422283,\"int\":77,\"cha\":75,\"exp\":53.04900000000008,\"cre\":63,\"eff\":50,\"sal\":948,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eKaVPsV\",\"mor\":100,\"hap\":99.99709251334957,\"ene\":99.99709251334957,\"int\":98,\"cha\":63,\"exp\":98.04900000000008,\"cre\":60,\"eff\":59,\"sal\":1128,\"loc\":\"\",\"pos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":188.24693692546083,\"Engineer\":310.3554521262157,\"Business\":0,\"Management\":308.948633116912,\"Research & Development\":0,\"total\":807.5510221685886,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":3}}},\"lastCycleRevenue\":158110.38616750864,\"lastCycleExpenses\":63562.97801867443,\"thisCycleRevenue\":3952829.4498235052,\"thisCycleExpenses\":1473677.8716307688,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":95.5816612834245,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0.1,\"loc\":\"Aevum\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":31.89054661133222,\"qlt\":0,\"dmd\":89.92886603270063,\"dmdR\":[80,99],\"cmp\":80.47893763335608,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":3.239054661133222,\"sll\":0,\"prd\":-0.05,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1989.589295308883,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":31.89054661133222,\"qlt\":0,\"dmd\":83.12063835104603,\"dmdR\":[80,90],\"cmp\":83.6286018516691,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":3.239054661133222,\"sll\":0,\"prd\":-0.05,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7837.90800577589,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74956.35527865351,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":933.4932302063124,\"qlt\":2.822317475568291,\"dmd\":85.51473321081747,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":4.384150770301425,\"prd\":0.1,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15509.57315770696,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":50.8001972912897,\"dmdR\":[5,99],\"cmp\":42.67899954862745,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":82953.84157802325,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":94.83173880770026,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":1.6,\"loc\":\"Chongqing\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0.5,\"qlt\":0,\"dmd\":91.34250090336903,\"dmdR\":[80,99],\"cmp\":79.09592259474434,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0.85,\"sll\":0,\"prd\":-0.8,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1992.3034455504792,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0.5,\"qlt\":0,\"dmd\":80.16285518976964,\"dmdR\":[80,90],\"cmp\":80.92246067904034,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.85,\"sll\":0,\"prd\":-0.8,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7959.462586198625,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73393.16828626256,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":947.9673880770026,\"qlt\":3.016622711513096,\"dmd\":93.13237867008763,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":5.103292424249884,\"prd\":1.6,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14585.890756530254,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":58.53566980793294,\"dmdR\":[5,99],\"cmp\":38.9127246953776,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":92368.09504745019,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":94.37697773549841,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":3.5,\"loc\":\"Sector-12\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":13.90186306804193,\"qlt\":0,\"dmd\":88.51140248954408,\"dmdR\":[80,99],\"cmp\":81.99483718130101,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":3.140186306804193,\"sll\":0,\"prd\":-1.75,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2019.070883143134,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":13.90186306804193,\"qlt\":0,\"dmd\":86.64685645436187,\"dmdR\":[80,90],\"cmp\":93.1086531947691,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":3.140186306804193,\"sll\":0,\"prd\":-1.75,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7339.072243464175,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75948.78432780987,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":934.0384732073547,\"qlt\":3.2492026328957904,\"dmd\":94.4341278286099,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":5.573451560914996,\"prd\":3.5,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16023.849325707955,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":25.98433530894228,\"dmdR\":[5,99],\"cmp\":30.27094462920732,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74442.33205112242,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":95.18873965957346,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":1.4,\"loc\":\"New Tokyo\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":1,\"qlt\":0,\"dmd\":89.47220852981522,\"dmdR\":[80,99],\"cmp\":79.4110592481632,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0.8,\"sll\":0,\"prd\":-0.7,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1970.6829661405193,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1,\"qlt\":0,\"dmd\":87.88867231622211,\"dmdR\":[80,90],\"cmp\":83.06809575619035,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.8,\"sll\":0,\"prd\":-0.7,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7856.278284194609,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78402.53240397386,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":951.1873965957345,\"qlt\":2.989997270366937,\"dmd\":87.49698641858885,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":4.752191482137514,\"prd\":1.4,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15437.140593933822,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":55.76567506073158,\"dmdR\":[5,99],\"cmp\":66.73585986717535,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72958.71159080284,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":98.91125709506703,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":3.6,\"loc\":\"Ishima\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":14.615435821512733,\"qlt\":0,\"dmd\":94.8665314439709,\"dmdR\":[80,99],\"cmp\":76.33661802362278,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":3.2615435821512735,\"sll\":0,\"prd\":-1.8,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2012.72026858394,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":14.615435821512733,\"qlt\":0,\"dmd\":80.55849351626081,\"dmdR\":[80,90],\"cmp\":92.08524448522965,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":3.2615435821512735,\"sll\":0,\"prd\":-1.8,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7681.887314898835,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70466.33340310452,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":978.8817658756112,\"qlt\":2.9076755986785434,\"dmd\":91.01935614663905,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":1.0565802041402053,\"prd\":3.6,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14275.804868980818,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":54.32866594297793,\"dmdR\":[5,99],\"cmp\":38.13794942647007,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80682.38397416899,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":91.74384238896813,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":6.301495003805065,\"loc\":\"Volhaven\",\"size\":100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.42417979759449,\"dmdR\":[80,99],\"cmp\":84.2484784941607,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":3.1391290766967086,\"sll\":0,\"prd\":-3.1391290766967086,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2002.615958211762,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":87.13403203586086,\"dmdR\":[80,90],\"cmp\":68.25492869014923,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":3.1391290766967086,\"sll\":0,\"prd\":-3.1391290766967086,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8372.718055469126,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74299.28566396373,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":917.4384238896813,\"qlt\":3.4487387366757747,\"dmd\":83.48651880749487,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":5.229827655789977,\"prd\":6.278258153393417,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14359.678391322332,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":66.63273677142433,\"dmdR\":[5,99],\"cmp\":53.66155963418215,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":88367.77252469317,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}}],\"funds\":1950578185.6698024,\"revenue\":158110.38616750864,\"expenses\":63562.97801867443,\"fundingRound\":0,\"public\":false,\"totalShares\":1000000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":0.8686437270478563,\"storedCycles\":0,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}},\"unlockUpgrades\":[0,1,0,0,0,0,0,0,1],\"upgrades\":[0,0,0,0,0,0,0,0,0,0],\"upgradeMultipliers\":[1,1,1,1,1,1,1,1,1,1]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1644725452459,\"totalPlaytime\":4236515000,\"playtimeSinceLastAug\":7400,\"playtimeSinceLastBitnode\":140721600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":262452698400.46246,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":262452698400.46246,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2323776,\"codingcontract\":3000000000,\"corporation\":-150000000000,\"crime\":723419298.2014389,\"gang\":158940282571575.97,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":23203145183281.598,\"work\":7829.54332160004,\"servers\":-10688379915440.223,\"other\":-1000561400000,\"augmentations\":-123901917176205.81}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643562392880},{\"ID\":\"NITESEC\",\"unlockedOn\":1643562392904},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643562392906},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643562392908},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643562392911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643562392913},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643562392915},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643562392917},{\"ID\":\"SF1.1\",\"unlockedOn\":1643562392919},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643562392922},{\"ID\":\"NS2\",\"unlockedOn\":1643562392923},{\"ID\":\"TOR\",\"unlockedOn\":1643562392924},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643562392925},{\"ID\":\"N00DLES\",\"unlockedOn\":1643562392925},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643566276100},{\"ID\":\"GANG\",\"unlockedOn\":1643568470494},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643569791497},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643594839087},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643614857134},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643630563574},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643636439173},{\"ID\":\"4S\",\"unlockedOn\":1643640469047},{\"ID\":\"DONATION\",\"unlockedOn\":1643643171411},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1643644311476},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643644491482},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643644491484},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643646900258},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643649060248},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1643650500301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643650500302},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643652857755},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643653397779},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1643656544025},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643659663895},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643660203905},{\"ID\":\"FAST_BN\",\"unlockedOn\":1643665783889},{\"ID\":\"SF2.1\",\"unlockedOn\":1643726290596},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643726470595},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643783376794},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643822106394},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643906625465},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1643908437104},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644039613691},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644040153715},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1644040693712},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1644041899916},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1644044937658},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1644044997657},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1644045177659},{\"ID\":\"SF3.1\",\"unlockedOn\":1644046569277},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1644194439494},{\"ID\":\"FROZE\",\"unlockedOn\":1644332957179},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644497529755},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1644584726118},{\"ID\":\"SF4.1\",\"unlockedOn\":1644584785971}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.1.0.9\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\nvar target = \\\"hong-fang-tea\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile(true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/early-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":205871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\r\\n// be 8GB.\\r\\nvar ram = 8;\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum\\r\\n// amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"early-hack.script\\\", hostname);\\r\\n        exec(\\\"early-hack-.script\\\", hostname, 3);\\r\\n        ++i;\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":205872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psc = ns.getPurchasedServerCost(ns.args[0]);\\n\\tns.tprint(psc);\\n}\",\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get-purchased-cost.js\",\"url\":\"blob:file:///a64e2bfb-523e-40c4-b00a-95aaec8b38a9\"}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":205873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tconst {hostname} = server;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tns.tprint(`killing ${hostname}...`);\\n\\t\\tns.killall(hostname);\\n\\t}\\n}\",\"filename\":\"killallOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/2077eb27-adaa-4156-a2a6-4f440a850ae1\",\"moduleSequenceNumber\":767157},{\"filename\":\"killallOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/4cf49a97-027b-4f11-bc93-eb748d589962\",\"moduleSequenceNumber\":768989}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":205874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst args = ns.args.slice(1);\\n\\t\\n\\tfor(let server of await getAllServers(ns)) {\\t\\t\\n\\t\\tconst hostname = server.hostname;\\n\\t\\tif(hostname == 'home') continue;\\n\\t\\tawait ns.exec(script, hostname, 1, ...args);\\n\\t}\\n}\",\"filename\":\"executeOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/ddafbc2e-d73b-47a9-ade4-a5a1f1cb0dd8\",\"moduleSequenceNumber\":197991},{\"filename\":\"executeOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/7036712a-c948-4590-8221-eb5d9bae8bad\",\"moduleSequenceNumber\":203081}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":205875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ram = ns.args[0];\\n\\tlet start = parseInt(ns.args[1]);\\n\\tconst script_file = ns.args[2];\\n\\tconst script_ram = ns.getScriptRam(script_file);\\n\\n\\tif(ram < script_ram) {\\n\\t\\tns.alert(\\\"Not enough ram available.\\\")\\n\\t\\treturn;\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst server_name = `pserv-${start}`;\\n\\t\\tconst money_available = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\tconst server_cost = ns.getPurchasedServerCost(ram);\\t\\n\\t\\tns.tprint(money_available)\\n\\t\\tns.tprint(server_cost)\\n\\n\\t\\tif (money_available > server_cost) {\\n\\t\\t\\tns.purchaseServer(server_name, ram);\\n\\t\\t\\tawait ns.scp(script_file, server_name);\\n\\t\\t\\tawait ns.exec(script_file, server_name, parseInt(ram / script_ram));\\n\\t\\t\\tstart += 1;\\n\\t\\t}\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchaseServer.js\",\"url\":\"blob:file:///940edb22-297b-4ce7-b03e-34cf2a400d22\"}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":205876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const servers = await getAllServers(ns);\\n   for(const server of servers) {\\n      if(ns.hasRootAccess(server.hostname)) continue;\\n      try {\\n         ns.brutessh(server.hostname);\\n         ns.ftpcrack(server.hostname);\\n         ns.relaysmtp(server.hostname);\\n         ns.httpworm(server.hostname);\\n         ns.sqlinject(server.hostname);\\n      } catch {\\n      } finally {\\n         try {\\n            ns.nuke(server.hostname);\\n            ns.tprint(`Succesfully attacked to ${server.hostname}.`)            \\n         }\\n         catch {\\n         }\\n      }\\n   }    \\n}\",\"filename\":\"attackOnAllServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/adb03b7e-838a-4b0b-9d73-59f247421db2\",\"moduleSequenceNumber\":197991},{\"filename\":\"attackOnAllServers.js\",\"url\":\"blob:https://danielyxie.github.io/e2878cac-1667-4900-beac-f65cb4ee8710\",\"moduleSequenceNumber\":203110}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":205877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';\\n\\tconst securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\t\\n\\twhile(true) {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target);\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\tif(securityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if(moneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"simpleHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"simpleHack.js\",\"url\":\"blob:https://danielyxie.github.io/7089202c-e543-42d1-bfb0-52aa06f30347\",\"moduleSequenceNumber\":360847}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":205878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst interval = ns.args[0];\\n\\tconst script = ns.args[1];\\n\\tconst args = ns.args.slice(2);\\n\\tconst hostname = ns.getServer().hostname;\\n\\n\\twhile(true) {\\n\\t\\tns.exec(script, hostname, 1, ...args);\\n\\t\\tawait ns.sleep(interval);\\n\\t}\\n}\",\"filename\":\"forever.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"forever.js\",\"url\":\"blob:https://danielyxie.github.io/46e96736-11a7-45fb-933e-92f2a45c5299\",\"moduleSequenceNumber\":198039}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":205879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nexport async function main(ns) {\\n   const thread = 10000;\\n   let exec_server = \\\"n00dles\\\";\\n   let server_list = await getAllServers(ns);\\n   \\n   if(ns.args.length == 1) {\\n      exec_server = ns.args[0];\\n   } else {\\n      for(let server of server_list) {\\n         server = server.hostname;\\n         if(server == 'home') continue;\\n         const {maxRam, ramUsed} = ns.getServer(server);\\n         if(!ns.hasRootAccess(server)) continue;\\n         if(maxRam - ramUsed > thread * ns.getScriptRam('simpleHack.js')) {\\n            exec_server = server;\\n            break;\\n         }\\n      }\\n   }\\n \\n   let candidates = [];\\n   let level_sum = 0;\\n   for(let server of server_list) {\\n      server = server.hostname;\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('simpleHack.js', exec_server);\\n   await ns.exec('simpleHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/0d32c0ec-4b1b-4ae5-bd56-bc8efcb9ac03\",\"moduleSequenceNumber\":679740},{\"filename\":\"hackRandomly.js\",\"url\":\"blob:https://danielyxie.github.io/fa947910-772c-4a5d-94d5-5dac3c060a44\",\"moduleSequenceNumber\":681257}],\"dependents\":[],\"ramUsage\":6,\"server\":\"home\",\"moduleSequenceNumber\":205880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as scanAll} from 'scanAll.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n   const thread = 1000;\\n   let exec_server = \\\"home\\\";\\n   let server_list = await scanAll(ns);\\n   let candidates = [];\\n   let level_sum = 0;\\n   for(const server of server_list) {\\n      const hack_level = ns.getHackingLevel();\\n      const server_level = ns.getServerRequiredHackingLevel(server);\\n      if(!ns.hasRootAccess(server)) continue;\\n      if(hack_level < server_level) continue;\\n      if(server_level == 1) continue;\\n      // ns.tprint(server, server_level);\\n      candidates.push([server, server_level]);\\n      level_sum += server_level;\\n   }\\n   let choosen_server;\\n   let random_value = Math.random() * level_sum;\\n   for(let i=0; i<candidates.length; i++) {\\n      random_value -= candidates[i][1];\\n      if(random_value <= 0) {\\n         choosen_server = candidates[i][0];\\n         break\\n      } \\n   }\\n   // ns.tprint(`Hack ${choosen_server} from ${exec_server}.`);\\n   await ns.scp('earlyHack.js', exec_server);\\n   await ns.exec('earlyHack.js', exec_server, thread, choosen_server, random_value);\\n}\",\"filename\":\"hackRandomlyHome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scanAll.js\",\"url\":\"blob:https://danielyxie.github.io/66bfca74-69e2-402a-8eff-5838802a043c\"},{\"filename\":\"hackRandomlyHome.js\",\"url\":\"blob:https://danielyxie.github.io/7d72ff23-75ae-4b1b-bc66-2912db2645de\"}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":205881}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n\\nexport async function main(ns) {\\n\\tconst ram = 1 << 20; // max value\\n\\tfor(let server of await getAllServers(ns)) {\\n\\t\\tif(!server.purchasedByPlayer) continue;\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(ns.getPurchasedServerCost(ram) > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n\\t\\t\\tns.tprint(\\\"You don't have enough money to buy 2^20GB RAM.\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(server.maxRam < ram) {\\n\\t\\t\\tns.tprint(`[killall] ${server.hostname}`);\\n\\t\\t\\tns.killall(server.hostname);\\n\\t\\t\\tns.tprint(`[delete] ${server.hostname} (${server.maxRam}GB)`);\\n\\t\\t\\tns.deleteServer(server.hostname);\\n\\t\\t\\tns.tprint(`[purchase] ${ns.purchaseServer(`SERVER_${ram}GB`, ram)}`);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\t\\n}\",\"filename\":\"upgradeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/621dbf3e-3196-4b45-9850-fdf15677bb6f\",\"moduleSequenceNumber\":382715},{\"filename\":\"upgradeServer.js\",\"url\":\"blob:https://danielyxie.github.io/5dcef9c2-c281-4d95-a3a9-4dcb4f85d84a\",\"moduleSequenceNumber\":388530}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":205882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst execArgs = ns.args.slice(1);\\n\\n \\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst server = ns.getServer().hostname;\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t// ns.tprint(`${script} ${scriptRam}, ${server}, ${availableRam}, ${ns.getServerMaxRam(server)}, ${ns.getServerUsedRam(server)}`);\\n\\n\\tif(availableRam > scriptRam) {\\n\\t\\t// ns.tprint(parseInt(availableRam / scriptRam));\\n\\t\\tawait ns.exec(script, server, parseInt(availableRam / scriptRam), ...execArgs);\\n\\t}\\n}\",\"filename\":\"execMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"execMax.js\",\"url\":\"blob:https://danielyxie.github.io/6229f34d-1389-426a-9667-f83d632a518e\",\"moduleSequenceNumber\":143699}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":205883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {purchaseServer} from 'server.js';\\n\\nexport async function main(ns) {\\n\\tlet ram = 1 << 6;\\n\\n\\twhile(true) {\\n\\t\\tif(ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\tawait purchaseServer(ns, ram);\\n\\t\\t\\tram = Math.min(ram << 1, 1 << 20);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"buyBuyPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/d7563921-c04e-4353-9d72-b7b9d9794617\",\"moduleSequenceNumber\":197991},{\"filename\":\"buyBuyPurchase.js\",\"url\":\"blob:https://danielyxie.github.io/3ce0cb44-cf0c-4504-bfbd-4d6538dca380\",\"moduleSequenceNumber\":198006}],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"home\",\"moduleSequenceNumber\":205884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:https://danielyxie.github.io/0e68dabe-aa1b-474e-acb4-f5fc119dd8bb\",\"moduleSequenceNumber\":143700}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":205885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/7758ab27-99eb-46d5-b34d-e9fe65e16903\"}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":205886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:https://danielyxie.github.io/aaad62c3-e816-4108-a8f0-317168e5de7d\",\"moduleSequenceNumber\":15152}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":205887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tconst message = [];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  server list');\\n\\tmessage.push('  server watch SERVER_NAME');\\n\\tmessage.push('  server purchase [-a|-u]');\\n\\tmessage.push('  server path');\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nexport async function getAllServers(ns) {\\n\\tns.disableLog('scan');\\n\\tlet servers = [];\\n\\tlet dfs = (node, prev) => {\\n\\t\\tservers.push(ns.getServer(node));\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tdfs(next, node);\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\");\\n\\treturn servers;\\n}\\n\\nexport async function formatServerInfo(ns, server) {\\n\\tconst nF = (number) => ns.nFormat(number, '$0.000a');\\n\\tconst tF = (time) => ns.tFormat(time);\\n\\tconst {hostname, organizationName, minDifficulty, requiredHackingSkill, serverGrowth, moneyMax} = server;\\n\\tconst moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n\\tconst securityLevel = ns.getServerSecurityLevel(hostname);\\n\\tconst maxRam = ns.getServerMaxRam(hostname);\\n\\n\\tlet info = \\\"\\\\n\\\";\\n\\tinfo += `# ${hostname} (${organizationName})\\\\n`;\\n\\tinfo += `- requirement: Hack >= ${requiredHackingSkill}\\\\n`;\\n\\tinfo += `- growth: ${serverGrowth}\\\\n`;\\n\\tinfo += `- grow(): ${tF(ns.getGrowTime(hostname))}\\\\n`;\\n\\tinfo += `- weaken(): ${tF(ns.getWeakenTime(hostname))}\\\\n`;\\n\\tinfo += `- hack(): ${tF(ns.getHackTime(hostname))}\\\\n`;\\n\\tinfo += `- money: ${nF(moneyAvailable)} / ${nF(moneyMax)}\\\\n`;\\n\\tinfo += `- maxRam: ${maxRam}\\\\n`;\\n\\tinfo += `- security: ${securityLevel.toFixed(3)} / ${minDifficulty}\\\\n`;\\n\\n\\treturn info;\\n}\\n\\nexport async function showServers(ns, option) {\\n\\tconst servers = await getAllServers(ns);\\n\\t// servers.sort((s0, s1) => s0.hostname < s1.hostname ? -1 : 1);\\n\\tservers.sort((s0, s1) => s0.requiredHackingSkill < s1.requiredHackingSkill ? -1 : 1);\\n\\tlet message = \\\"\\\\n\\\";\\n\\tfor(const server of servers) {\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tif(option == '-q')\\n\\t\\t\\tmessage += `${server.hostname}  `\\n\\t\\telse\\n\\t\\t\\tmessage += await formatServerInfo(ns, server);\\n\\t}\\n\\tns.tprint(message);\\n}\\n\\nexport async function watchServer(ns, target) {\\n\\tns.tail();\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tconst server = await ns.getServer(target)\\n\\t\\tconst info =  await formatServerInfo(ns, server);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(info);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport async function purchaseServer(ns, ram) {\\n\\tconst purchasedServers = ns.getPurchasedServers();\\n\\tif(purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\tns.toast('Already reached the limit.', 'error');\\n\\t}\\n\\tif(typeof ram === 'undefined') {\\n\\t\\tram = 1;\\n\\t\\twhile(ns.getPurchasedServerCost(ram) < ns.getServerMoneyAvailable(\\\"home\\\"))\\n\\t\\t\\tram <<= 1;\\n\\t\\tram >>= 1;\\n\\t\\tconst cost = ns.nFormat(ns.getPurchasedServerCost(ram), '$0.000a');\\n\\t\\tconst message = `Are you sure you want to purchase a ${ram}GB RAM server for ${cost}`;\\n\\t\\tif(!await ns.prompt(message)) return;\\n\\t}\\n\\tconst hostname = await ns.purchaseServer(`SERVER_${ram}GB`, ram);\\n\\tif(hostname) ns.toast(`Successfully purchased ${hostname}`);\\n}\\n\\nexport function pathToServer(ns, target) {\\n\\tns.disableLog('scan');\\n\\tlet path = [];\\n\\tlet dfs = (node, prev, target) => {\\n\\t\\tif(node == target) {\\n\\t\\t\\tpath.push(node);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tfor(let next of ns.scan(node)) {\\n\\t\\t\\tif(next == prev) continue;\\n\\t\\t\\tif(dfs(next, node, target)) {\\n\\t\\t\\t\\tpath.push(node);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tdfs(\\\"home\\\", \\\"\\\", target);\\n\\tlet command = '\\\\n';\\n\\tfor(const hostname of path.reverse()) {\\n\\t\\tcommand += `connect ${hostname}; `;\\n\\t}\\n\\tns.tprint(command);\\n}\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'list':\\n\\t\\t\\tawait showServers(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'watch':\\n\\t\\t\\tawait watchServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchase':\\n\\t\\t\\tawait purchaseServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'path':\\n\\t\\t\\tawait pathToServer(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/04180154-ce57-429d-8b34-f62afb29f017\",\"moduleSequenceNumber\":434652}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":205888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers, formatServerInfo} from 'server.js';\\n\\nexport async function optimalThreads(ns, target, type, expected = 0) {\\n\\tlet thread;\\n\\tif(type == 'weaken') {\\n\\t\\tconst securityLevel = ns.getServerSecurityLevel(target) + expected;\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet ok = 1 << 20;\\n\\t\\tlet ng = 0;\\n\\t\\twhile(ok - ng > 1) {\\n\\t\\t\\tthread = Math.floor((ok + ng) / 2);\\n\\t\\t\\tif(securityLevel - ns.weakenAnalyze(thread) < minSecurityLevel)\\n\\t\\t\\t\\tok = thread\\n\\t\\t\\telse\\n\\t\\t\\t\\tng = thread\\n\\t\\t}\\n\\t} else if(type == 'grow') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst growthAmount = maxMoney / moneyAvailable;\\n\\t\\tthread = ns.growthAnalyze(target, growthAmount);\\n\\t} else if(type == 'hack') {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(target) + expected;\\n\\t\\tthread = ns.hackAnalyzeThreads(target, moneyAvailable);\\n\\t}\\n\\treturn thread;\\n}\\n\\nexport async function allocateTask(ns, script, thread, args) {\\n\\tif(!ns.fileExists(script))\\n\\t\\tthrow new Error(`${script} does not exist.`);\\n\\n\\tconst ramNeeded = ns.getScriptRam(script) * thread;\\n\\tlet target;\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tif(server.hostname == 'home') continue;\\n\\t\\tif(!server.hasAdminRights) continue;\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tif(maxRam - ramUsed > ramNeeded) {\\n\\t\\t\\ttarget = server.hostname;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif(typeof target === 'undefined')\\n\\t\\tthrow new Error(`No server can use more than ${ramNeeded}GB of RAM.`);\\n\\tif(!ns.fileExists(script, target))\\n\\t\\tawait ns.scp(script, target);\\n\\tconst UNIXTIME = (new Date()).getTime()\\n\\targs.push(UNIXTIME);\\n\\tconst PID = ns.exec(script, target, thread, ...args);\\n\\tif(PID == 0)\\n\\t\\tthrow new Error(`An error occured while running ${script} on ${target}.`);\\n\\tns.print(`# ${script} is running...`);\\n\\tns.print(`- server: ${target}`);\\n\\tns.print(`- thread: ${thread}`);\\n\\tns.print(`- ram: ${ramNeeded}GB`);\\n}\\n\\nexport async function attackOnServer(ns, target, threadLimit = 1<<19) {\\n\\tlet earning = 0;\\n\\tlet totalThread = 0;\\n\\tlet duration = 0;\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tlet sleepTime = 0;\\n\\t\\tif(ns.getServerMinSecurityLevel(target) + 1 < ns.getServerSecurityLevel(target)) {\\n\\t\\t\\tconst wThread = Math.min(await optimalThreads(ns, target, 'weaken'), threadLimit);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', wThread, [target]);\\n\\n\\t\\t\\ttotalThread += wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else if(ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target) * 0.95) {\\n\\t\\t\\tconst gThread = await optimalThreads(ns, target, 'grow');\\n\\t\\t\\tawait allocateTask(ns, 'grow.js', Math.min(gThread, threadLimit), [target]);\\n\\t\\t\\tconst expected = ns.growthAnalyzeSecurity(gThread);\\n\\t\\t\\tconst wThread = await optimalThreads(ns, target, 'weaken', expected);\\n\\t\\t\\tawait allocateTask(ns, 'weaken.js', Math.min(wThread, threadLimit), [target]);\\n\\n\\t\\t\\ttotalThread += gThread + wThread;\\n\\t\\t\\tsleepTime = ns.getWeakenTime(target);\\n\\t\\t} else {\\n\\t\\t\\tconst leftover = ns.getServerMaxMoney(target) * 0.7;\\n\\t\\t\\tconst hThread = await optimalThreads(ns, target, 'hack', -leftover);\\n\\t\\t\\tawait allocateTask(ns, 'hack.js', Math.min(hThread, threadLimit), [target]);\\n\\t\\t\\tearning += ns.getServerMoneyAvailable(target) - leftover;\\n\\n\\t\\t\\ttotalThread += hThread;\\n\\t\\t\\tsleepTime = ns.getHackTime(target);\\n\\t\\t}\\n\\n\\t\\t// display stats\\n\\t\\tns.print(await formatServerInfo(ns, ns.getServer(target)));\\n\\n\\t\\tduration += sleepTime + 100;\\n\\t\\tawait ns.sleep(sleepTime + 100);\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'hack':\\n\\t\\t\\tawait attackOnServer(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'exp':\\n\\t\\t\\tconst thread = ns.args[1];\\n\\t\\t\\tconst target = ns.args[2] || 'joesguns';\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tawait allocateTask(ns, 'weaken.js', thread, [target])\\n\\t\\t\\t\\tawait ns.sleep(ns.getWeakenTime(target));\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/d53e39aa-5a8b-475f-b0e3-ae52214ca116\",\"moduleSequenceNumber\":14577},{\"filename\":\"manager.js\",\"url\":\"blob:https://danielyxie.github.io/ad790639-7660-4674-976c-b9e175ec0884\",\"moduleSequenceNumber\":14888}],\"dependents\":[],\"ramUsage\":10.5,\"server\":\"home\",\"moduleSequenceNumber\":205889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js'\\n\\nexport async function main(ns) {\\n\\tconst scripts = ns.ls('home', 'js');\\n\\tfor(const server of await getAllServers(ns)) {\\n\\t\\tawait ns.scp(scripts, server.hostname);\\n\\t}\\n}\",\"filename\":\"transferScripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/0a4297e2-f9a5-418f-8e6c-bdb73ab4304e\",\"moduleSequenceNumber\":197991},{\"filename\":\"transferScripts.js\",\"url\":\"blob:https://danielyxie.github.io/44e25f20-a7cd-4de7-aaea-6413eeb59506\",\"moduleSequenceNumber\":198040}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":205890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction usage() {\\n\\tconst message = [\\\"\\\"];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  run contract.js [-h|-d|-v]\\\");\\n\\tmessage.push(\\\"Options:\\\");\\n\\tmessage.push(\\\"  -h: display this help\\\");\\n\\tmessage.push(\\\"  -d: run as daemon mode (interval 60s)\\\");\\n\\tmessage.push(\\\"  -v: run as verbose mode\\\");\\n\\treturn message.join('\\\\n');\\n}\\n\\nfunction solveContract(ns, contract, hostname, options) {\\n\\tconst cct = ns.codingcontract;\\n\\tconst type = cct.getContractType(contract, hostname);\\n\\tconst data = cct.getData(contract, hostname);\\n\\tconst description = cct.getDescription(contract, hostname);\\n\\n\\tlet answer;\\n\\tswitch(type) {\\n\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\tanswer = solveFindAllValidMathExpressions(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\tanswer = solveSanitizeParenthesesInExpression(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\tanswer = solveFindLargestPrimeFactor(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\tanswer = solveGenerateIPAddresses(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\tanswer = solveMinimumPathSumInATriangle(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\tanswer = solveArrayJumpingGame(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\tanswer = solveSpiralizeMatrix(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\tanswer = solveSubarrayWithMaximumSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\tanswer = solveTotalWaysToSum(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\tanswer = solveMergeOverlappingIntervals(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderIII(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\tanswer = solveAlgorithmicStockTraderIV(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\tanswer = solveUniquePathsInAGridI(data);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\tanswer = solveUniquePathsInAGridII(data);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(`[WARNING] There is no solver for '${type}'.`);\\n\\t\\t\\tif(options.includes('-v')) {\\n\\t\\t\\t\\tns.tprint(description);\\n\\t\\t\\t}\\n\\t\\t\\treturn;\\n\\t}\\n\\tconst reward = cct.attempt(answer, contract, hostname, {'returnReward': true});\\n\\n\\tif(reward) {\\n\\t\\tns.tprint(`[AC] ${reward}`);\\n\\t} else {\\n\\t\\tconst triesRemaining = cct.getNumTriesRemaining(contract, hostname);\\n\\t\\tlet message = \\\"\\\";\\n\\t\\tmessage += `[WA] You can try ${triesRemaining} more times.\\\\n`;\\n\\t\\tmessage += `${description}\\\\n`;\\n\\t\\tmessage += `Your answer: ${answer}\\\\n`\\n\\t\\tthrow new Error(message);\\n\\t}\\n}\\n\\n/**\\n * You are given the following string which contains only digits between 0 and 9:\\n * $S$\\n * You are also given a target number of $t$. Return all possible ways you can add the +, -, and * operators to the string such that it evaluates to the target number.\\n * The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n * [S, t]\\n * NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n * Input: digits = \\\"123\\\", target = 6\\n * Output: [1+2+3, 1*2*3]\\n * Input: digits = \\\"105\\\", target = 5\\n * Output: [1*0+5, 10-5]\\n */\\nfunction solveFindAllValidMathExpressions(data) {\\n\\tlet [S, t] = data;\\n\\tconst n = S.length;\\n\\tif(n > 8) {\\n\\t\\tthrow new Error('You should implement a more effecient algorithm. This algorithm takes $O(n 4^n)$ time.');\\n\\t}\\n\\n\\tconst answer = [];\\n\\n\\t// quatenary digit brute force\\n\\tconst maximum = Math.pow(4, n-1);\\n\\tfor(let q=0; q<maximum; q++) {\\n\\t\\tconst operations = [];\\n\\t\\tlet temp = q;\\n\\t\\tfor(let i=0; i<n-1; i++) {\\n\\t\\t\\t// {0: '+', 1: '-', 2: '*', 3: ''}\\n\\t\\t\\toperations.push(temp % 4);\\n\\t\\t\\ttemp = Math.floor(temp / 4);\\n\\t\\t}\\n\\n\\t\\tlet isValid = true;\\n\\t\\tconst expression = [S[0]];\\n\\t\\tfor(let i=0; i<n-1; i++) {\\n\\t\\t\\tconst operation = operations[i];\\n\\t\\t\\tconst term = expression.pop();\\n\\t\\t\\tif(operation == 3) {\\n\\t\\t\\t\\texpression.push(term + S[i+1]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tisValid &= !term.startsWith('0') || term == '0';\\n\\t\\t\\t\\texpression.push(term + '+-*'[operation]);\\n\\t\\t\\t\\texpression.push(S[i+1]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tconst term = expression.pop();\\n\\t\\tisValid &= !term.startsWith('0') || term == '0';\\n\\t\\texpression.push(term);\\n\\n\\t\\tif(isValid) {\\n\\t\\t\\tconst value = eval(expression.join(''));\\n\\t\\t\\tif(value == t) answer.push(expression.join(''));\\n\\t\\t}\\n\\t}\\n\\n\\treturn answer;\\n}\\n\\n\\n/**\\n * Given the following string:\\n * remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [()()(), (())()]\\n * \\\"(a)())()\\\" -> [(a)()(), (a())()]\\n * \\\")( -> [\\\"\\\"]\\n */\\nfunction solveSanitizeParenthesesInExpression(data) {\\n\\tconst str = data;\\n\\tconst n = str.length;\\n\\tif(n > 20) {\\n\\t\\tthrow new Error('You should implement a more effecient algorithm. This algorithm takes $O(n 2^n)$ time.');\\n\\t}\\n\\n\\tconst cand = [];\\n\\tfor(let bit=0; bit<(1<<n); bit++) {\\n\\t\\tlet sub = '';\\n\\t\\tfor(let i=0; i<n; i++) {\\n\\t\\t\\tif((bit >> i) & 1) sub += str[i];\\n\\t\\t}\\n\\t\\tlet counter = 0;\\n\\t\\tfor(let i=0; i<sub.length; i++) {\\n\\t\\t\\tif(sub[i] == '(') counter += 1;\\n\\t\\t\\tif(sub[i] == ')') counter -= 1;\\n\\t\\t\\tif(counter < 0) break;\\n\\t\\t}\\n\\t\\tif(counter == 0) cand.push(sub);\\n\\t}\\n\\tconst len = Math.max(...cand.map(sub => sub.length));\\n\\tconst ans = cand.filter(sub => sub.length == len);\\n\\treturn Array.from(new Set(ans));\\n}\\n\\n/**\\n * A prime factor is a factor that is a prime number. What is the largest prime factor of $n$?\\n */\\nfunction solveFindLargestPrimeFactor(data) {\\n\\tconst n = data;\\n\\tconst factors = [];\\n\\n\\tlet temp = n;\\n\\tfor(let x=2; x*x<=n; x++) {\\n\\t\\twhile(temp % x == 0) {\\n\\t\\t\\ttemp /= x;\\n\\t\\t\\tfactors.push(x);\\n\\t\\t}\\n\\t}\\n\\tfactors.push(temp);\\n\\n\\treturn Math.max(...factors);\\n}\\n\\n/**\\n * Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\n * Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\n * Examples:\\n * 25525511135 -> [255.255.11.135, 255.255.111.35]\\n * 1938718066 -> [193.87.180.66]\\n */\\nfunction solveGenerateIPAddresses(data) {\\n\\tconst number = data;\\n\\tconst n = number.length;\\n\\tconst ans = [];\\n\\n\\tfor(let i=1; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<n; j++) {\\n\\t\\t\\tfor(let k=j+1; k<n; k++) {\\n\\t\\t\\t\\tlet ok = true;\\n\\t\\t\\t\\tconst address = [];\\n\\t\\t\\t\\tfor(const [l, r] of [[0, i], [i, j], [j, k], [k, n]]) {\\n\\t\\t\\t\\t\\tconst segment = number.slice(l, r);\\n\\t\\t\\t\\t\\taddress.push(segment);\\n\\t\\t\\t\\t\\tok &= !segment.startsWith('0') || segment == '0';\\n\\t\\t\\t\\t\\tok &= parseInt(segment) >= 0;\\n\\t\\t\\t\\t\\tok &= parseInt(segment) <= 255;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(ok) ans.push(address.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ans;\\n}\\n\\n/**\\n * Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n * Example: If you are given the following triangle:\\n *    [2]\\n *   [3,4]\\n *  [6,5,7]\\n * [4,1,8,3]\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n */\\nfunction solveMinimumPathSumInATriangle(data) {\\n\\tconst triangle = data;\\n\\tconst n = triangle.length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<=i; j++) {\\n\\t\\t\\tdp[i][j] = 1<<30;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = triangle[0][0];\\n\\n\\tfor(let i=0; i<n-1; i++) {\\n\\t\\tfor(let j=0; j<=i; j++) {\\n\\t\\t\\tfor(let k=0; k<2; k++) {\\n\\t\\t\\t\\tconst ni = i + 1;\\n\\t\\t\\t\\tconst nj = j + k;\\n\\t\\t\\t\\tdp[ni][nj] = Math.min(dp[ni][nj], dp[i][j] + triangle[ni][nj]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Math.min(...dp[n-1]);\\n}\\n\\n/**\\n * You are given the following array of integers:\\n * Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\n * Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n * Your answer should be submitted as 1 or 0, representing true and false respectively\\n */\\nfunction solveArrayJumpingGame(data) {\\n\\tconst jump = data;\\n\\tconst n = jump.length;\\n\\tconst dp = [1];\\n\\tfor(let i=1; i<n; i++) dp[i] = 0;\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tif(dp[i] == 0) continue;\\n\\t\\tfor(let j=1; j<=jump[i]; j++) dp[i+j] = 1;\\n\\t}\\n\\treturn Math.min(dp[n-1]);\\n}\\n\\n/**\\n * Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\n * Here is an example of what spiral order should be:\\n * [1, 2, 3]\\n * [4, 5, 6]\\n * [7, 8, 9]\\n * Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\n * Note that the matrix will not always be square:\\n */\\nfunction solveSpiralizeMatrix(data) {\\n\\tconst rot90 = A => A[0].map((_, c) => A.map(r => r[c])).reverse();\\n\\tlet grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tif(h == 1) return grid[0];\\n\\tif(w == 1) return rot90(grid)[0];\\n\\n\\tlet result = [];\\n\\tfor(let i=0; i<4; i++) {\\n\\t\\tresult = result.concat(grid[0]);\\n\\t\\tif(grid.length == 1) break;\\n\\t\\tgrid = rot90(grid.slice(1));\\n\\t}\\n\\n\\tif(h == 2 || w == 2)\\n\\t\\treturn result;\\n\\telse\\n\\t\\treturn result.concat(solveSpiralizeMatrix(grid));\\n}\\n\\n/**\\n * Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\n */\\nfunction solveSubarrayWithMaximumSum(data) {\\n\\tconst seq = data;\\n\\tconst n = seq.length;\\n\\tconst cand = [];\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tfor(let j=i+1; j<=n; j++) {\\n\\t\\t\\tconst sub = seq.slice(i, j);\\n\\t\\t\\tcand.push(sub.reduce((a, b) => a + b));\\n\\t\\t}\\n\\t}\\n\\treturn Math.max(...cand);\\n}\\n\\n/**\\n * It is possible write four as a sum in exactly four different ways:\\n * 3 + 1\\n * 2 + 2\\n * 2 + 1 + 1\\n * 1 + 1 + 1 + 1\\n * How many different ways can the number $n$ be written as a sum of at least two positive integers?\\n */\\nfunction solveTotalWaysToSum(data) {\\n\\tconst n = data;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) dp[i] = 0;\\n\\tdp[0] = 1;\\n\\tfor(let step=1; step<=n; step++) {\\n\\t\\tfor(let i=0; i<n; i++) dp[i+step] += dp[i];\\n\\t}\\n\\treturn dp[n] - 1;\\n}\\n\\n/**\\n * Given the following array of array of numbers representing a list of intervals, merge all overlapping intervals.\\n * Example:\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n * would merge into [[1, 6], [8, 16]].\\n * The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\n */\\nfunction solveMergeOverlappingIntervals(data) {\\n\\tconst intervals = data;\\n\\tintervals.sort((x, y) => x[0] - y[0]);\\n\\tconst answer = [data[0]];\\n\\tfor(const interval of intervals.slice(1)) {\\n\\t\\tconst last = answer.pop();\\n\\t\\tif(interval[0] <= last[1]) {\\n\\t\\t\\tlast[1] = Math.max(last[1], interval[1]);\\n\\t\\t\\tanswer.push(last);\\n\\t\\t} else {\\n\\t\\t\\tanswer.push(last);\\n\\t\\t\\tanswer.push(interval);\\n\\t\\t}\\n\\t}\\n\\treturn answer\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\n */\\nfunction solveAlgorithmicStockTraderI(data) {\\n\\treturn solveAlgorithmicStockTraderIV([1, data]);\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n * If no profit can be made, then the answer should be 0\\n */\\nfunction solveAlgorithmicStockTraderII(data) {\\n\\treturn solveAlgorithmicStockTraderIV([data.length, data]);\\n}\\n\\n/**\\n * You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n * Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\n */\\nfunction solveAlgorithmicStockTraderIII(data) {\\n\\treturn solveAlgorithmicStockTraderIV([2, data]);\\n}\\n\\n/**\\n  * You are given the following array with two elements:\\n * The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\n * If no profit can be made, then the answer should be 0.\\n */\\nfunction solveAlgorithmicStockTraderIV(data) {\\n\\tconst [m, prices] = data;\\n\\tconst n = prices.length;\\n\\n\\t// Init dp table\\n\\tconst dp = [];\\n\\tfor(let i=0; i<=n; i++) {\\n\\t\\tdp[i] = []\\n\\t\\tfor(let j=0; j<=m; j++) {\\n\\t\\t\\tdp[i][j] = [];\\n\\t\\t\\tfor(let k=0; k<2; k++) {\\n\\t\\t\\t\\tdp[i][j][k] = -1<<30;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tdp[0][0][0] = 0;\\n\\n\\t// Update dp table\\n\\tfor(let i=0; i<n; i++) {\\n\\t\\tconst p = prices[i];\\n\\t\\tfor(let j=0; j<=m; j++) {\\n\\t\\t\\tfor(let k=0; k<2; k++) {\\n\\t\\t\\t\\tdp[i+1][j][k] = Math.max(dp[i+1][j][k], dp[i][j][k]);\\n\\t\\t\\t}\\n\\t\\t\\tdp[i+1][j][0] = Math.max(dp[i+1][j][0], dp[i][j][1] + p);\\n\\t\\t\\tif(j+1 <= m) dp[i+1][j+1][1] = Math.max(dp[i+1][j+1][1], dp[i][j][0] - p);\\n\\t\\t}\\n\\t}\\n\\n\\t// ans := max(dp[n][*][*])\\n\\tlet ans = -1<<30;\\n\\tfor(let j=0; j<=m; j++) {\\n\\t\\tfor(let k=0; k<2; k++) {\\n\\t\\t\\tans = Math.max(ans, dp[n][j][k]);\\n\\t\\t}\\n\\t}\\n\\n\\treturn ans;\\t\\n}\\n\\n/**\\n * You are in a grid with $h$ rows and $w$ columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n */\\nfunction solveUniquePathsInAGridI(data) {\\n\\tconst h = data[0];\\n\\tconst w = data[1];\\n\\tconst grid = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tgrid[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tgrid[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\treturn solveUniquePathsInAGridII(grid);\\n}\\n\\n/**\\n * You are located in the top-left corner of the following grid:\\n *  0,0,1,1,0,0,0,0,\\n * 0,0,0,0,0,1,0,0,\\n * You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\n * Determine how many unique paths there are from start to finish.\\n * NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\n */\\nfunction solveUniquePathsInAGridII(data) {\\n\\tconst grid = data;\\n\\tconst h = grid.length;\\n\\tconst w = grid[0].length;\\n\\tconst dp = [];\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tdp[i] = [];\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tdp[i][j] = 0;\\n\\t\\t}\\n\\t}\\n\\tdp[0][0] = 1;\\n\\n\\tfor(let i=0; i<h; i++) {\\n\\t\\tfor(let j=0; j<w; j++) {\\n\\t\\t\\tif(i + 1 < h && grid[i + 1][j] == 0) {\\n\\t\\t\\t\\tdp[i + 1][j] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tif(j + 1 < w && grid[i][j+1] == 0) {\\n\\t\\t\\t\\tdp[i][j + 1] += dp[i][j];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[h-1][w-1];\\n}\\n\\nexport async function main(ns) {\\n\\tconst options = ns.args;\\n\\tif(options.includes('-h')) {\\n\\t\\tns.tprint(usage());\\n\\t\\tns.exit();\\n\\t}\\n\\twhile(true) {\\n\\t\\tfor(const server of await getAllServers(ns)) {\\n\\t\\t\\tconst {hostname} = server;\\n\\t\\t\\tconst contracts = ns.ls(hostname, 'cct');\\n\\t\\t\\tfor(const contract of contracts) {\\n\\t\\t\\t\\tsolveContract(ns, contract, hostname, options);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(!options.includes('-d')) break;\\n\\t\\tawait ns.sleep(60 * 1000);\\n\\t}\\n}\",\"filename\":\"contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server.js\",\"url\":\"blob:https://danielyxie.github.io/a9c29756-91f1-4ac8-bf70-17735cb4a8e2\",\"moduleSequenceNumber\":49},{\"filename\":\"contract.js\",\"url\":\"blob:https://danielyxie.github.io/95b54e6c-9086-44e3-835c-85063816a7ee\",\"moduleSequenceNumber\":10087}],\"dependents\":[],\"ramUsage\":31,\"server\":\"home\",\"moduleSequenceNumber\":205891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage(ns) {\\n\\tlet message = [];\\n\\tmessage.push(\\\"Usage:\\\");\\n\\tmessage.push(\\\"  gang purchaseAll\\\");\\n\\tmessage.push(\\\"  gang purchaseBasic <num>\\\");\\n\\tmessage.push(\\\"  gang setTaskAll <task>\\\");\\n\\tmessage.push(\\\"  gang ascendAll\\\");\\n\\tns.tprint(message.join('\\\\n'));\\n}\\n\\nfunction purchaseAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames()) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n\\tns.tprint('Successfully purchase all.');\\n}\\n\\nfunction purchaseBasic(ns, num=0) {\\n\\tconst gng = ns.gang;\\n\\tns.tprint(gng.getEquipmentNames().slice(0, num))\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tfor(const equipment of gng.getEquipmentNames().slice(0, num)) {\\n\\t\\t\\tgng.purchaseEquipment(member, equipment);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction setTaskAll(ns, task) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.setMemberTask(member, task);\\n\\t}\\n\\tns.tprint('Successfully set all.');\\n}\\n\\nfunction ascendAll(ns) {\\n\\tconst gng = ns.gang;\\n\\tfor(const member of gng.getMemberNames()) {\\n\\t\\tgng.ascendMember(member);\\n\\t}\\n\\tns.tprint('Successfully ascend all.');\\n}\\n\\nexport async function main(ns) {\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'purchaseAll':\\n\\t\\t\\tpurchaseAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'purchaseBasic':\\n\\t\\t\\tpurchaseBasic(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'setTaskAll':\\n\\t\\t\\tsetTaskAll(ns, ns.args[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 'ascendAll':\\n\\t\\t\\tascendAll(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tusage(ns);\\n\\t}\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:https://danielyxie.github.io/f5a1ddbf-f737-44ae-8eee-03c8a1689a8a\",\"moduleSequenceNumber\":6113}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":205892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst unit = 10; // [threads]\\n\\tlet h = 0, g = 0, w = 0;\\n\\t/**\\n\\t * https://bitburner.readthedocs.io/en/latest/advancedgameplay/hackingalgorithms.html#loop-algorithms\\n\\t * 1 part to the hack script\\n\\t * 10 parts to the grow scripts\\n\\t * 2 parts to the weaken scripts\\n\\t */\\n\\twhile(true) {\\n\\t\\tconst server = ns.getServer();\\n\\t\\tconst {maxRam, ramUsed} = server;\\n\\t\\tconst ramAvailable = maxRam - ramUsed;\\n\\t\\tif(unit * 2 < ramAvailable) {\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"ratioHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":205893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage() {\\n\\tconst message = [''];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  run calc.js rep2fav <reputation>');\\n\\tmessage.push('  run calc.js fav2rep <favor>');\\n\\treturn message.join('\\\\n');\\n}\\n\\nfunction reputation2favor(reputation) {\\n\\tconst log_ = (a, x) => Math.log(x) / Math.log(a);\\n\\treturn 1 + Math.floor(log_(1.02, (reputation + 25000) / 25500));\\n}\\n\\nfunction favor2reputation(favor) {\\n\\tif(favor < 0 || 1e100 < favor) throw new Error('favor < 0 || 1e100 < favor');\\n\\t// reputation2favor(x) >= favor\\n\\tlet ok = 1e100;\\n\\tlet ng = -1;\\n\\tfor(let i=0; i<10000; i++) {\\n\\t\\tlet x = (ok + ng) / 2;\\n\\t\\tconsole.log(x);\\n\\t\\treputation2favor(x) >= favor ? (ok = x) : (ng = x);\\n\\t}\\n\\treturn ok\\n}\\n\\nexport async function main(ns) {\\n\\tconst options = ns.flags([\\n\\t\\t['h', false],\\n\\t])\\n\\tif(options['h']) {\\n\\t\\tns.tprint(usage());\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst type = ns.args[0];\\n\\tswitch(type) {\\n\\t\\tcase 'rep2fav':\\n\\t\\t\\tns.tprint(reputation2favor(ns.args[1]));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'fav2rep':\\n\\t\\t\\tconst favor = ns.args[1];\\n\\t\\t\\tconst reputation = favor2reputation(favor);\\n\\t\\t\\tns.tprint(`You need ${ns.nFormat(reputation, '$0.000a')} reputations to earn ${ns.nFormat(favor, '$0.000a')} favors.`);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(usage());\\n\\t\\t\\tbreak;\\n\\t}\\n}\",\"filename\":\"calc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"calc.js\",\"url\":\"blob:https://danielyxie.github.io/102bd94a-246f-4a70-afb5-23d2f705b5a4\",\"moduleSequenceNumber\":425530}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":205894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function usage() {\\n\\tconst message = [''];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  run office.js reassign <division> <city> <ratio>');\\n\\tmessage.push('')\\n\\tmessage.push('Example usage:')\\n\\tmessage.push('  run office.js reassign <division> <city> 1:1:1:1:1:1  # reassign evenly');\\n\\tmessage.push('  run office.js reassign ALL ALL 0:0:0:0:0:1  # reassign all employees to Training');\\n\\treturn message.join('\\\\n');\\n}\\n\\nexport async function reassign(ns, division, city, ratio) {\\n\\tratio = ratio.split(':').map(x => parseInt(x));\\n\\tconst jobs = ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development', 'Training'];\\n\\tconst corp = ns.corporation;\\n\\tconst {divisions} = corp.getCorporation();\\n\\tfor(const d of divisions) {\\n\\t\\tif(division != d.name && division != 'ALL') continue;\\n\\t\\tfor(const c of d.cities) {\\n\\t\\t\\tif(city != c && city != 'ALL') continue;\\n\\t\\t\\tconst office = corp.getOffice(d.name, c);\\n\\t\\t\\tfor(const employee of office.employees) {\\n\\t\\t\\t\\tawait corp.assignJob(d.name, c, employee, 'Unassigned');\\n\\t\\t\\t}\\n\\t\\t\\tconst sum = ratio.reduce((x, y) => x + y);\\n\\t\\t\\tfor(let i=0; i<6; i++) {\\n\\t\\t\\t\\tconst num = parseInt(ratio[i] * office.employees.length / sum);\\n\\t\\t\\t\\tif(num == 0) continue;\\n\\t\\t\\t\\tns.tprint(`Assign ${num} employees to ${jobs[i]}`)\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(d.name, c, jobs[i], num);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function hireMax(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\twhile(true) {\\n\\t\\tcorp.hireEmployee(division, city);\\n\\t\\tawait ns.sleep(0.001);\\n\\t}\\n}\\n\\n\\nexport async function main(ns) {\\n\\tswitch(ns.args[0]) {\\n\\t\\tcase 'reassign':\\n\\t\\t\\tawait reassign(ns, ...ns.args.slice(1));\\n\\t\\t\\tbreak;\\n\\t\\tcase 'hireMax':\\n\\t\\t\\tawait hireMax(ns, ...ns.args.slice(1));\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(usage());\\n\\t}\\n\\n}\",\"filename\":\"office.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"office.js\",\"url\":\"blob:https://danielyxie.github.io/7ba572f1-4258-4770-9326-30884f4ac164\",\"moduleSequenceNumber\":9654}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":205895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServers} from 'server.js';\\n\\nfunction usage() {\\n\\tconst message = [''];\\n\\tmessage.push('Usage:');\\n\\tmessage.push('  run run.js <script> [options...]');\\n\\tmessage.push('');\\n\\tmessage.push('Options:')\\n\\tmessage.push('-d: run as daemon mode');\\n\\tmessage.push('-f: run as force mode (kill other processes if needed)');\\n\\tmessage.push('-s <hostname>: specify a server (default: HERE)');\\n\\tmessage.push('');\\n\\tmessage.push('Example Usage:')\\n\\tmessage.push('  run run.js -s joesguns weaken.js');\\n\\tmessage.push('  run run.js -f -s ANY hack.js');\\n}\\n\\n/**\\n * Options:\\n *   availableRam: ... [GB]\\n *   \\n *   \\n */\\nfunction filterServer(options) {\\n\\n}\\n\\nexport async function main(ns) {\\n\\tconst script = ns.args[0];\\n\\tconst options = ns.flags([\\n\\t\\t['f', false],\\n\\t\\t['s', 'HERE'],\\n\\t]);\\n\\tconst scriptRam = ns.getScriptRam('')\\n\\t// specify server\\n\\tif(options['s'] == 'HERE') options['s'] = ns.getHostname();\\n\\tif(options['s'] == 'ANY') {\\n\\t\\tfor(const server of await getAllServers(ns)) {\\n\\t\\t\\tif(server.)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run.js\",\"url\":\"blob:https://danielyxie.github.io/42fd28f3-d3e6-4d19-8ef9-51cab8a4db20\",\"moduleSequenceNumber\":236572}],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":205896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\twhile(true) {\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`karma: ${ns.heart.break()}`);\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\",\"filename\":\"karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"karma.js\",\"url\":\"blob:https://danielyxie.github.io/37543f09-3270-482f-9dce-64c182ed3ff2\",\"moduleSequenceNumber\":63}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":205897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile(true) {\\n\\t\\tlet sleepTime;\\n\\t\\tif(ns.getCrimeChance('Homicide') > 0.95) {\\n\\t\\t\\tsleepTime = ns.commitCrime('Homicide');\\n\\t\\t} else {\\n\\t\\t\\tsleepTime = ns.commitCrime('Mug someone');\\n\\t\\t}\\n\\t\\tawait ns.sleep(sleepTime);\\n\\t}\\n}\",\"filename\":\"/singularity/gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/singularity/gang.js\",\"url\":\"blob:https://danielyxie.github.io/4f0566f6-7523-4305-91b6-8dcf9765a82a\",\"moduleSequenceNumber\":64}],\"dependents\":[],\"ramUsage\":161.6,\"server\":\"home\",\"moduleSequenceNumber\":205898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const crimes = [\\n\\t'Shoplift',\\n\\t'Rob Store',\\n\\t'Mug Someone',\\n\\t'Larceny',\\n\\t'Deal Drugs',\\n\\t'Bond Forgery',\\n\\t'Traffick Illegal Arms',\\n\\t'Homicide',\\n\\t'Grand Theft Auto',\\n\\t'Kidnap and Ransom',\\n\\t'Assassination',\\n\\t'Heist'\\n]\\n\\nexport async function main(ns) {\\n\\tconst message = [''];\\n\\tfor(const crime of crimes) {\\n\\t\\tns.tprint(ns.getCrimeStats(crime));\\n\\t\\tconst {karma, time, money} = ns.getCrimeStats(crime);\\n\\t\\tmessage.push(`${crime}:`);\\n\\t\\tmessage.push(`  money: ${ns.nFormat(money, '$0.000a')}`);\\n\\t\\tmessage.push(`  karma: ${karma}`);\\n\\t\\tmessage.push(`  time: ${time}`);\\n\\t\\tmessage.push(`  \\\\$/s: ${ns.nFormat(money / time * 1000, '$0.000a')}`);\\n\\t}\\n\\tns.tprint(message.join('\\\\n'));\\n}\",\"filename\":\"/singularity/crimes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/singularity/crimes.js\",\"url\":\"blob:https://danielyxie.github.io/0348915c-d9c9-459c-b266-57ff9466a968\",\"moduleSequenceNumber\":1801}],\"dependents\":[],\"ramUsage\":81.6,\"server\":\"home\",\"moduleSequenceNumber\":205899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile(true) {\\n\\t\\tlet sleepTime;\\n\\t\\tif(ns.getCrimeChance('Homicide') > 0.95) {\\n\\t\\t\\tsleepTime = ns.commitCrime('Homicide');\\n\\t\\t} else {\\n\\t\\t\\tsleepTime = ns.commitCrime('Mug someone');\\n\\t\\t}\\n\\t\\tawait ns.sleep(sleepTime);\\n\\t}\\n}\",\"filename\":\"/singularity/commitCrimes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":161.6,\"server\":\"home\",\"moduleSequenceNumber\":205900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function seedStage(ns) {\\n\\t// members.length <= 3\\n\\n}\\n\\nfunction earlyStage(ns) {\\n\\t// members.length < 12\\n}\\n\\nfunction middleStage(ns) {\\n\\t// members.length == 12 and !hasAllEquipments\\n\\tconst gang = ns.gang;\\n}\\n\\nfunction laterStage(ns) {\\n\\t// members.length == 12 and hasAllEquipments\\n\\tconst gang = ns.gang;\\n}\\n\\nexport async function main(ns) {\\n\\tconst gang = ns.gang;\\n\\t// const num = ns.args[0];\\n\\tlet members = gang.getMemberNames();\\n\\n\\twhile(true) {\\n\\t\\t// Train combat\\n\\t\\tmembers.forEach((member, index) => {\\n\\t\\t\\tgang.setMemberTask(member, 'Train Combat');\\n\\t\\t});\\n\\t\\tawait ns.sleep(30 * 60 * 1000);\\n\\n\\t\\t// Earn respect and money \\n\\t\\tmembers.forEach((member, index) => {\\n\\t\\t\\tif(index == 0) {\\n\\t\\t\\t\\t// gang.setMemberTask(member, 'Terrorism');\\n\\t\\t\\t\\tgang.setMemberTask(member, 'Territory Warfare');\\n\\t\\t\\t\\t// gang.setMemberTask(member, 'Traffick Illegal Arms');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgang.setMemberTask(member, 'Traffick Illegal Arms');\\n\\t\\t\\t\\t// gang.setMemberTask(member, 'Human Trafficking');\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tawait ns.sleep(30 * 60 * 1000);\\n\\n\\t\\t// Ascend and purchase equipments\\n\\t\\tmembers.reverse().forEach((member, index) => {\\n\\t\\t\\tgang.ascendMember(member);\\n\\t\\t\\tfor(const equipment of gang.getEquipmentNames()) {\\n\\t\\t\\t\\tgang.purchaseEquipment(member, equipment);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n}\",\"filename\":\"manageGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manageGang.js\",\"url\":\"blob:https://danielyxie.github.io/019a4892-3535-4809-8d65-9feaac5f9cd0\",\"moduleSequenceNumber\":32297}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":205901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cities = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"]\\nexport async function main(ns) {\\n\\tconst corp = ns.corporation;\\n\\tconst {divisions} = corp.getCorporation();\\n\\tfor(const division of divisions) {\\n\\t\\tfor(const city of cities) {\\n\\t\\t\\t// corp.expandCity(division.name, city);\\n\\t\\t\\twhile(true) {\\n\\t\\t\\t\\tconst employee = corp.hireEmployee(division.name, city)\\n\\t\\t\\t\\tns.tprint(employee);\\n\\t\\t\\t\\tif(typeof employee === 'undefined') break;\\n\\t\\t\\t\\tawait ns.sleep(0.01);\\n\\t\\t\\t}\\n\\t\\t\\tawait corp.setAutoJobAssignment(division.name, city, 'Operations', 1);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division.name, city, 'Engineer', 1);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division.name, city, 'Management', 1);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"manageCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manageCorp.js\",\"url\":\"blob:https://danielyxie.github.io/0b8cd386-94d1-48eb-a568-03e247f78b7f\",\"moduleSequenceNumber\":34275}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":205902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"memo.txt\",\"text\":\"nitesec: avmnite-02h\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"- manager.js\\n\\t- [ ] auto mode\\n\\t- [ ] divide tasks when allocating\\n- server.js\\n\\t- [ ] auto purchase\\n\\t- [ ] filtering\\n- misc\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"75.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":20230049314.5,\"moneyMax\":1011502465725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1323,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"67.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":21573633643,\"moneyMax\":1078681682150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"73.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":10839107159,\"moneyMax\":541955357950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"29.6.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":11439313688.5,\"moneyMax\":571965684425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":934,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"53.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":13673451866.5,\"moneyMax\":683672593325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1048,\"serverGrowth\":81}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"5.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":8488067213.5,\"moneyMax\":424403360675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1078,\"serverGrowth\":46}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"24.9.0.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":7135741349,\"moneyMax\":356787067450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"23.6.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":9947982599,\"moneyMax\":497399129950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"50.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":194,\"hackDifficulty\":194,\"minDifficulty\":65,\"moneyAvailable\":13934700073,\"moneyMax\":696735003650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1008,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"56.5.5.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":740710896,\"moneyMax\":37035544800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1197,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"8.5.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1255,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"48.1.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":582463837,\"moneyMax\":29123191850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"87.7.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":468438781,\"moneyMax\":23421939050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1009,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"92.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":414228676.5,\"moneyMax\":20711433825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":69}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"26.4.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":298667459,\"moneyMax\":14933372950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"43.0.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":395051355,\"moneyMax\":19752567750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"38.5.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":186,\"minDifficulty\":62,\"moneyAvailable\":489145848.5,\"moneyMax\":24457292425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"79.6.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":164,\"hackDifficulty\":164,\"minDifficulty\":55,\"moneyAvailable\":585704418,\"moneyMax\":29285220900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"44.9.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":376408531.5,\"moneyMax\":18820426575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"10.4.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":304674945,\"moneyMax\":15233747250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"34.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":401052663.5,\"moneyMax\":20052633175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"43.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":413151113,\"moneyMax\":20657555650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":86}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"79.2.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":174,\"hackDifficulty\":174,\"minDifficulty\":58,\"moneyAvailable\":530077804,\"moneyMax\":26503890200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":911,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"66.6.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":488387296,\"moneyMax\":24419364800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"6.7.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":112,\"minDifficulty\":37,\"moneyAvailable\":520706611.5,\"moneyMax\":26035330575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"40.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":379478499,\"moneyMax\":18973924950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"13.6.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":407521418,\"moneyMax\":20376070900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"40.9.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":168,\"hackDifficulty\":168,\"minDifficulty\":56,\"moneyAvailable\":834493323,\"moneyMax\":41724666150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"32.0.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":783242313.5,\"moneyMax\":39162115675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"51.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":585748671.5,\"moneyMax\":29287433575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"52.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":662782966.5,\"moneyMax\":33139148325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"34.2.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":519114660.5,\"moneyMax\":25955733025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"98.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":367302118.5,\"moneyMax\":18365105925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":714,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"2.5.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":306199212,\"moneyMax\":15309960600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"49.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":363596028.5,\"moneyMax\":18179801425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":529,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"99.0.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":106121813.5,\"moneyMax\":5306090675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":436,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"76.6.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":113320016.5,\"moneyMax\":5666000825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":377,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"68.9.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":549087089,\"moneyMax\":27454354450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"84.5.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":137657250.5,\"moneyMax\":6882862525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":426,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"58.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":202724506,\"moneyMax\":10136225300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":615,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"98.4.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":205777912,\"moneyMax\":10288895600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":39}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"63.3.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":78860442,\"moneyMax\":3943022100,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":288,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"32.8.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":112392637.5,\"moneyMax\":5619631875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":319,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"16.8.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"97.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112,\"hackDifficulty\":112,\"minDifficulty\":37,\"moneyAvailable\":37211830.5,\"moneyMax\":1860591525,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":280,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"34.1.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"15.7.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"19.1.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"46.9.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"0.7.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"32.0.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"89.2.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"75.0.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"39.8.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"4.8.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"25.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":12000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"33.9.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.4.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":33587730,\"moneyMax\":1679386500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":197,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"11.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":20777264,\"moneyMax\":1038863200,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":265,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"16.9.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"86.4.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":482,\"serverGrowth\":42}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"43.8.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124,\"hackDifficulty\":124,\"minDifficulty\":41,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":965,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"21.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":694,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"94.5.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"87.5.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"84.1.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":204,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"44.9.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"82.6.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"59.3.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"10.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":118.0648,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":275.5245,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":56.8245,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":626.1961,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":33665892.637422204}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"forever\":\"run forever.js\",\"server\":\"run server.js\",\"buyAll\":\"connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; home;\",\"path\":\"run server.js path CSEC; run server.js path avmnite-02h; run server.js path I.I.I.I; run server.js path run4theh111z;\",\"expMining\":\"forever 1000 executeOnAllServers.js execMax.js weaken.js joesguns\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":true}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":60,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"dracula\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#28CF28\",\"primary\":\"#21A821\",\"primarydark\":\"#177317\",\"successlight\":\"#1CFF1C\",\"success\":\"#16CA16\",\"successdark\":\"#0D910D\",\"errorlight\":\"#FF3B3B\",\"error\":\"#C32D2D\",\"errordark\":\"#8E2121\",\"secondarylight\":\"#B3B3B3\",\"secondary\":\"#838383\",\"secondarydark\":\"#676767\",\"warninglight\":\"#FFFF3A\",\"warning\":\"#C3C32A\",\"warningdark\":\"#8C8C1E\",\"infolight\":\"#64CBFF\",\"info\":\"#3399CC\",\"infodark\":\"#246D91\",\"welllight\":\"#404040\",\"well\":\"#1C1C1C\",\"white\":\"#C3C3C3\",\"black\":\"#0A0B0B\",\"hp\":\"#C62E2E\",\"money\":\"#D6BB27\",\"hack\":\"#ADFF2F\",\"combat\":\"#E8EDCD\",\"cha\":\"#8B5FAF\",\"int\":\"#537CC8\",\"rep\":\"#E8EDCD\",\"disabled\":\"#5AB5A5\",\"backgroundprimary\":\"#0C0D0E\",\"backgroundsecondary\":\"#121415\",\"button\":\"#252829\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":25,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":23217.79863356584,\"territory\":0.8404348055189844},\"Tetrads\":{\"power\":412.1344876754485,\"territory\":0},\"The Syndicate\":{\"power\":442.86818063465023,\"territory\":0},\"The Dark Army\":{\"power\":437.1868114937252,\"territory\":0},\"Speakers for the Dead\":{\"power\":5.303726487581649,\"territory\":0},\"NiteSec\":{\"power\":420.61073371985276,\"territory\":0},\"The Black Hand\":{\"power\":14.807089077533984,\"territory\":0.15956519448101464}}","LastExportBonus":"1644720928053","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644725452503"}}